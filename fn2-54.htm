<html>
<head>
<title>Computer Associates v. Altai</title>
<link rel="Stylesheet" type="text/css" href="case.sty">
</head>

<body>








<div class=Section1>

<p class=Name>Computer Associates International, Inc. v. Altai, Inc.</p>

<p class=Court>U.S. Court of Appeals, Second Circuit</p>

<p class=CaseDate>June 22, 1992</p>

<p class=CaseCite>982 F.2d 693, 23 USPQ2d 1241</p>

<p class=Judge>Walker, J.</p>

<p class=Paragraph>In recent years, the growth of computer science has spawned a number of challenging legal questions, particularly in the field of copyright law. As scientific knowledge advances, courts endeavor to keep pace, and sometimes&nbsp;– as in the area of computer technology&nbsp;– they are required to venture into less than familiar waters. This is not a new development, though. “From its beginning, the law of copyright has developed in response to significant changes in technology.” <i>Sony Corp. v. Universal City Studios, Inc., </i>464 U.S. 417, 430 [220 USPQ 665] (1984).</p>

<p class=Paragraph>Article I, section 8 of the Constitution authorizes Congress “[t]o promote the Progress of Science and useful Arts, by securing for limited Times to Authors and Inventors the exclusive Right to their respective Writings and Discoveries.” The Supreme Court has stated that “[t]he economic philosophy behind the clause&nbsp;.&nbsp;.&nbsp;. is the conviction that encouragement of individual effort by personal gain is the best way to advance public welfare.” <i>Mazer v. Stein</i>,347 U.S. 201, 219 [100 USPQ 325] (1954). The author’s benefit, however, is clearly a “secondary” consideration. <i>See</i><i>United States</i><i> v. Paramount Pictures, Inc.</i>, 334 U.S. 131, 158 [77 USPQ 243] (1948). “[T]he ultimate aim is, by this incentive, to stimulate artistic creativity for the general public good.” <i>Twentieth Century Music Corp. v. Aiken,</i> 422 U.S. 151, 156 [186 USPQ 65] (1975).</p>

<p class=Paragraph>Thus, the copyright law seeks to establish a delicate equilibrium. On the one hand, it affords protection to authors as an incentive to create, and, on the other, it must appropriately limit the extent of that protection so as to avoid the effects of monopolistic stagnation. In applying the federal act to new types of cases, courts must always keep this symmetry in mind. <i>Id </i>.</p>

<p class=Paragraph>Among other things, this case deals with the challenging question of whether and to what extent the “non-literal” aspects of a computer program, that is, those aspects that are not reduced to a written code, are protected by copyright. While a few other courts have already grappled with this issue, this case is one of first impression in this circuit. As we shall discuss, we find the results <span class=SourcePN>&lt;23 USPQ2d 1245&gt;</span><A name="23USPQ2d1245"></A> reached by other courts to be less than satisfactory. Drawing upon long-standing doctrines of copyright law, we take an approach that we think better addresses the practical difficulties embedded in these types of cases. In so doing, we have kept in mind the necessary balance between creative incentive and industrial competition.</p>

<p class=Paragraph>This appeal comes to us from the United States District Court for the Eastern District of New York, the Honorable George C. Pratt, Circuit Judge, sitting by designation. By Memorandum and Order entered August 12, 1991, Judge Pratt found that defendant Altai, Inc.’s (“Altai”), OSCAR 3.4 computer program had infringed plaintiff Computer Associates’ (“CA”), copyrighted computer program entitled CA-SCHEDULER. Accordingly, the district court awarded CA $364,444 in actual damages and apportioned profits. Altai has <span class=SourcePN>&lt;982 F.2d 697&gt;</span><A name="982F.2d697"></A> abandoned its appeal from this award. With respect to CA’s second claim for copyright infringement, Judge Pratt found that Altai’s OSCAR 3.5 program was not substantially similar to a portion of CA-SCHEDULER called ADAPTER, and thus denied relief. Finally, the district court concluded that CA’s state law trade secret misappropriation claim against Altai had been preempted by the federal copyright act. CA appealed from these findings.</p>

<p class=Paragraph>Because we are in full agreement with Judge Pratt’s decision and in substantial agreement with his careful reasoning, we affirm the judgment of the district court in its entirety.</p>

<h1>Background</h1>

<p class=Paragraph>We assume familiarity with the facts set forth in the district court’s comprehensive and scholarly opinion. <i>See Computer Associates Int’l, Inc. v. Altai, Inc.,</i> 775 F.Supp.544, 549-55 [20 USPQ2d 1641] (E.D.N.Y. 1991). Thus, we summarize only those facts necessary to resolve this appeal.</p>

<h2>I. Computer Program Design</h2>

<p class=Paragraph>Certain elementary facts concerning the nature of computer programs are vital to the following discussion. The Copyright Act defines a computer program as “a set of statements or instructions to be used directly or indirectly in a computer in order to bring about a certain result.” 17 U.S.C. Section 101 . In writing these directions, the programmer works “from the general to the specific.” <i>Whelan Associates, Inc. v. Jaslow Dental Laboratory, Inc.,</i> 797 F.2d 1222, 1229 [230 USPQ 481] (3d Cir. 1986), <i>cert. denied</i>,479 U.S. 1031 (1987). <i>See generally, </i>Steven R. Englund, Note,<i>Idea, Process, or Protected Expression?: Determining the Scope of Copyright Protection of the Structure of Computer Programs,</i> 88 MICH. L. REV. 866, 867-73 (1990) (hereinafter “Englund”); Peter S. Menell, <i>An Analysis of the Scope of Copyright Protection for Application Programs,</i> 41 STAN. L. REV. 1045, 1051-57 (1989) (hereinafter “Menell”); Mark T. Kretschmer, Note, <i>Copyright Protection For Software Architecture: Just Say No!,</i> 1988 COLUM. BUS. L. REV. 823, 824-27 (1988) (hereinafter “Kretschmer”); Peter G. Spivack, Comment, <i>Does Form Follow Function? The Idea/Expression Dichotomy In Copyright Protection of Computer Software,</i> 35 U.C.L.A. L. REV. 723, 729-31 (1988) (hereinafter “Spivack”).</p>

<p class=Paragraph>The first step in this procedure is to identify a program’s ultimate function or purpose. An example of such an ultimate purpose might be the creation and maintenance of a business ledger. Once this goal has been achieved, a programmer breaks down or “decomposes” the program’s ultimate function into “simpler constituent problems or ‘subtasks,’ “ Englund, at 870 , which are also known as subroutines or modules. <i>See</i>Spivack, at 729 . In the context of a business ledger program, a module or subroutine might be responsible for the task of updating a list of outstanding accounts receivable. Sometimes, depending upon the complexity of its task, a subroutine may be broken down further into sub-subroutines.</p>

<p class=Paragraph>Having sufficiently decomposed the program’s ultimate function into its component elements, a programmer will then arrange the subroutines or modules into what are known as organizational or flow charts. Flow charts map the interactions between modules that achieve the program’s end goal. <i>See </i>Kretschmer,at 826 .</p>

<p class=Paragraph>In order to accomplish these intra-program interactions, a programmer must carefully design each module’s parameter list. A parameter list, according to the expert appointed and fully credited by the district court, Dr. Randall Davis, is “the information sent to and received from a subroutine.” <i>See </i>Report of Dr. Randall Davis, at 12 . The term “parameter list” refers to the form in which information is passed between modules (<i>e.g.</i>for accounts receivable, the designated time frame and particular customer identifying number) and the information’s actual content <span class=SourcePN>&lt;982 F.2d 698&gt;</span><A name="982F.2d698"></A> (<i>e.g. </i>8/91-7/92; customer No. 3). <i>Id . </i>With respect to form, interacting modules must share similar parameter lists so that they are capable of exchanging information.<span class=SourcePN>&lt;23 USPQ2d 1246&gt;</span><A name="23USPQ2d1246"></A> </p>

<p class=Paragraph>“The functions of the modules in a program together with each module’s relationships to other modules constitute the ‘structure’ of the program.” Englund, at 871 . Additionally, the term structure may include the category of modules referred to as “macros.” A macro is a single instruction that initiates a sequence of operations or module interactions within the program. Very often the user will accompany a macro with an instruction from the parameter list to refine the instruction (<i>e.g. </i>current total of accounts receivable (macro), but limited to those for 8/91 to 7/92 from customer No. 3 (parameters)).</p>

<p class=Paragraph>In fashioning the structure, a programmer will normally attempt to maximize the program’s speed, efficiency, as well as simplicity for user operation, while taking into consideration certain externalities such as the memory constraints of the computer upon which the program will be run. <i>See id.; </i>Kretschmer,at 826 ; Menell, at 1052 . “This stage of program design often requires the most time and investment.” Kretschmer, at 826 .</p>

<p class=Paragraph>Once each necessary module has been identified, designed, and its relationship to the other modules has been laid out conceptually, the resulting program structure must be embodied in a written language that the computer can read. This process is called “coding,” and requires two steps. <i>Whelan,</i>797 F.2d at 1230 . First, the programmer must transpose the program’s structural blue-print into a source code. This step has been described as “comparable to the novelist fleshing out the broad outline of his plot by crafting from words and sentences the paragraphs that convey the ideas.” Kretschmer, at 826 . The source code may be written in any one of several computer languages, such as COBAL, FORTRAN, BASIC, EDL, etc., depending upon the type of computer for which the program is intended.<i> Whelan, </i>797 F.2d at 1230 . Once the source code has been completed, the second step is to translate or “compile” it into object code. Object code is the binary language comprised of zeros and ones through which the computer directly receives its instructions. <i>Id.</i><i>,</i>at 1230-31 ; Englund, at 868 &amp; n.13 .</p>

<p class=Paragraph>After the coding is finished, the programmer will run the program on the computer in order to find and correct any logical and syntactical errors. This is known as “debugging” and, once done, the program is complete. <i>See </i>Kretschemer,at 826-27 .</p>

<h2>II. Facts</h2>

<p class=Paragraph>CA is a Delaware corporation, with its principal place of business in Garden City, New York. Altai is a Texas corporation, doing business primarily in Arlington, Texas. Both companies are in the computer software industry&nbsp;– designing, developing and marketing various types of computer programs.</p>

<p class=Paragraph>The subject of this litigation originates with one of CA’s marketed programs entitled CA-SCHEDULER. CA-SCHEDULER is a job scheduling program designed for IBM mainframe computers. Its primary functions are straightforward: to create a schedule specifying when the computer should run various tasks, and then to control the computer as it executes the schedule. CA-SCHEDULER contains a sub-program entitled ADAPTER, also developed by CA. ADAPTER is not an independently marketed product of CA; it is a wholly integrated component of CA-SCHEDULER and has no capacity for independent use.</p>

<p class=Paragraph>Nevertheless, ADAPTER plays an extremely important role. It is an “operating system compatibility component,” which means, roughly speaking, it serves as a translator. An “operating system” is itself a program that manages the resources of the computer, allocating those resources to other programs as needed. The IBM’s System 370 family of computers, for which CA-SCHEDULER was created, is, depending upon the computer’s size, designed to contain one of three operating systems: DOS/VSE, MVS, or CMS. As the district court noted, the general rule is that “a <span class=SourcePN>&lt;982 F.2d 699&gt;</span><A name="982F.2d699"></A> program written for one operating system, <i>e.g.,</i> DOS/VSE, will not, without modification, run under another operating system such as MVS.” <i>Computer Associates, </i>775 F. Supp. at 550 . ADAPTER’s function is to translate the language of a given program into the particular language that the computer’s own operating system can understand.</p>

<p class=Paragraph>The district court succinctly outlined the manner in which ADAPTER works within the context of the larger program. In order to enable CA-SCHEDULER to function on different operating systems, CA divided the CA-SCHEDULER into two components:</p>

<p class=Paragraph>–&nbsp;a first component that contains only the task-specific portions of the program, independent of all operating system issues, and</p>

<p class=Paragraph>–&nbsp;a second component that contains all the interconnections between the first component and the operating system.<span class=SourcePN>&lt;23 USPQ2d 1247&gt;</span><A name="23USPQ2d1247"></A> </p>

<p class=Paragraph>In a program constructed in this way, whenever the first, task-specific, component needs to ask the operating system for some resource through a “system call”, it calls the second component instead of calling the operating system directly.</p>

<p class=Paragraph>The second component serves as an “interface” or “compatibility component” between the task-specific portion of the program and the operating system. It receives the request from the first component and translates it into the appropriate system call that will be recognized by whatever operating system is installed on the computer, <i>e.g.,</i> DOS/VSE, MVS, or CMS. Since the first, task-specific component calls the adapter component rather than the operating system, the first component need not be customized to use any specific operating system. The second interface component insures that all the system calls are performed properly for the particular operating system in use. <i>Id.</i>at 551 .</p>

<p class=Paragraph>ADAPTER serves as the second, “common system interface” component referred to above.</p>

<p class=Paragraph>A program like ADAPTER, which allows a computer user to change or use multiple operating systems while maintaining the same software, is highly desirable. It saves the user the costs, both in time and money, that otherwise would be expended in purchasing new programs, modifying existing systems to run them, and gaining familiarity with their operation. The benefits run both ways. The increased compatibility afforded by an ADAPTER-like component, and its resulting popularity among consumers, makes whatever software in which it is incorporated significantly more marketable.</p>

<p class=Paragraph>Starting in 1982, Altai began marketing its own job scheduling program entitled ZEKE. The original version of ZEKE was designed for use in conjunction with a VSE operating system. By late 1983, in response to customer demand, Altai decided to rewrite ZEKE so that it could be run in conjunction with an MVS operating system.</p>

<p class=Paragraph>At that time, James P. Williams (“Williams”), then an employee of Altai and now its President, approached Claude F. Arney, III (“Arney”), a computer programmer who worked for CA. Williams and Arney were longstanding friends, and had in fact been co-workers at CA for some time before Williams left CA to work for Altai’s predecessor. Williams wanted to recruit Arney to assist Altai in designing an MVS version of ZEKE.</p>

<p class=Paragraph>At the time he first spoke with Arney,Williams was aware of both the CA-SCHEDULER and ADAPTER programs. However, Williams was not involved in their development and had never seen the codes of either program. When he asked Arney to come work for Altai, Williams did not know that ADAPTER was a component of CA-SCHEDULER.</p>

<p class=Paragraph>Arney, on the other hand, was intimately familiar with various aspects of ADAPTER. While working for CA, he helped improve the VSE version of ADAPTER, and was permitted to take home a copy of ADAPTER’s source code. This apparently developed into an irresistible habit, for when Arney left CA to work for Altai in January, 1984, he took with him copies of <span class=SourcePN>&lt;982 F.2d 700&gt;</span><A name="982F.2d700"></A> the source code for both the VSE and MVS versions of ADAPTER. He did this in knowing violation of the CA employee agreements that he had signed.</p>

<p class=Paragraph>Once at Altai, Arney and Williams discussed design possibilities for adapting ZEKE to run on MVS operating systems. Williams, who had created the VSE version of ZEKE, thought that approximately 30% of his original program would have to be modified in order to accommodate MVS. Arney persuaded Williams that the best way to make the needed modifications was to introduce a “common system interface” component into ZEKE. He did not tell Williams that his idea stemmed from his familiarity with ADAPTER. They decided to name this new component-program OSCAR.</p>

<p class=Paragraph>Arney went to work creating OSCAR. No one at Altai, including Williams, knew that he had the ADAPTER code, and no one knew that he was using it to design OSCAR/VSE. In three months, Arney successfully completed the OSCAR/VSE project. In an additional month he developed an OSCAR/MVS version. When the dust finally settled, Arney had copied approximately 30% of OSCAR’s code from CA’s ADAPTER program.</p>

<p class=Paragraph>The first generation of OSCAR programs was known as OSCAR 3.4. From 1985 to August 1988, Altai used OSCAR 3.4 in its ZEKE product, as well as in programs entitled ZACK and ZEBB. In late July 1988, CA first learned that Altai may have appropriated parts of ADAPTER. After confirming its suspicions, CA secured copyrights on its 2.1 and 7.0 versions of CA-SCHEDULER. CA then brought this copyright and trade secret misappropriation action against Altai.</p>

<p class=Paragraph>Apparently, it was upon receipt of the summons and complaint that Altai first learned that Arney had copied much of the OSCAR code from ADAPTER. After Arney confirmed to Williams that CA’s accusations of copying were true, Williams <span class=SourcePN>&lt;23 USPQ2d 1248&gt;</span><A name="23USPQ2d1248"></A> immediately set out to survey the damage. Without ever looking at the ADAPTER code himself, Williams learned from Arney exactly which sections of code Arney had taken from ADAPTER.</p>

<p class=Paragraph>Upon advice of counsel, Williams initiated OSCAR’s rewrite. The project’s goal was to save as much of OSCAR 3.4 as legitimately could be used, and to excise those portions which had been copied from ADAPTER. Arney was entirely excluded from the process, and his copy of the ADAPTER code was locked away. Williams put eight other programmers on the project, none of whom had been involved in any way in the development of OSCAR 3.4. Williams provided the programmers with a description of the ZEKE operating system services so that they could rewrite the appropriate code. The rewrite project took about six months to complete and was finished in mid-November 1989. The resulting program was entitled OSCAR 3.5.</p>

<p class=Paragraph>From that point on, Altai shipped only OSCAR 3.5 to its new customers. Altai also shipped OSCAR 3.5 as a “free upgrade” to all customers that had previously purchased OSCAR 3.4. While Altai and Williams acted responsibly to correct what Arney had wrought, the damage was done. CA’s lawsuit remained.</p>

<p class=Paragraph>After CA originally instituted this action in the United States District Court for the District of New Jersey, the parties stipulated its transfer in March, 1989, to the Eastern District of New York where it was assigned to Judge Jacob Mishler. On October 26, 1989, Judge Mishler transferred the case to Judge Pratt who was sitting in the district court by designation. Judge Pratt conducted a six day trial from March 28 through April 6, 1990.He entered judgment on August 12, 1991,and this appeal followed.<span class=SourcePN>&lt;982 F.2d 701&gt;</span><A name="982F.2d701"></A> </p>

<h1>Discussion</h1>

<p class=Paragraph>While both parties originally appealed from different aspects of the district court’s judgment, Altai has now abandoned its appellate claims. In particular, Altai has conceded liability for the copying of ADAPTER into OSCAR 3.4 and raises no challenge to the award of $364,444 in damages on that score. Thus, we address only CA’s appeal from the district court’s rulings that: (1) Altai was not liable for copyright infringement in developing OSCAR 3.5; and (2) in developing both OSCAR 3.4 and 3.5, Altai was not liable for misappropriating CA’s trade secrets.</p>

<p class=Paragraph>CA makes two arguments. First, CA contends that the district court applied an erroneous method for determining whether there exists substantial similarity between computer programs, and thus, erred in determining that OSCAR 3.5 did not infringe the copyrights held on the different versions of its CA-SCHEDULER program. CA asserts that the test applied by the district court failed to account sufficiently for a computer program’s non-literal elements. Second, CA maintains that the district court erroneously concluded that its state law trade secret claims had been preempted by the federal copyright act, <i>see </i>17 U.S.C. Section 301(a) . We shall address each argument in turn.</p>

<h2>I. Copyright Infringement</h2>

<p class=Paragraph>In any suit for copyright infringement, the plaintiff must establish its ownership of a valid copyright, and that the defendant copied the copyrighted work. <i>See Novelty Textile Mills, Inc. v. Joan Fabrics Corp., </i>558 F.2d 1090, 1092 [195 USPQ 1] (2d Cir. 1977); <i>see also</i> 3 Melville B. Nimmer &amp; David Nimmer, <i>Nimmer on Copyright </i>Section 13.01, at 13-4 (1991) (hereinafter “Nimmer”). The plaintiff may prove defendant’s copying either by direct evidence or, as is most often the case, by showing that (1) the defendant had access to the plaintiff’s copyrighted work and (2) that defendant’s work is substantially similar to the plaintiff’s copyrightable material. <i>See Walker v. Time Life Films, Inc., </i>784 F.2d 44, 48 [228 USPQ 505] (2d Cir.), <i>cert. denied, </i>476 U.S. 1159 (1986).</p>

<p class=Paragraph>For the purpose of analysis, the district court assumed that Altai had access to the ADAPTER code when creating OSCAR 3.5. <i>See Computer Associates, </i>775 F. Supp. at 558 . Thus, in determining whether Altai had unlawfully copied protected aspects of CA’s ADAPTER, the district court narrowed its focus of inquiry to ascertaining whether Altai’s OSCAR 3.5 was substantially similar to ADAPTER. Because we approve Judge Pratt’s conclusions regarding substantial similarity, our analysis will proceed along the same assumption.</p>

<p class=Paragraph>As a general matter, and to varying degrees, copyright protection extends beyond a literary work’s strictly textual form to its non-literal components. As we have said, “[i]t is of course essential to any protection of literary property&nbsp;.&nbsp;.&nbsp;. that the right cannot be limited literally to the text, else a plagiarist would escape by immaterial variations.” <i>Nichols v. Universal Pictures Co.,</i> 45 F.2d 119, 121 [7 USPQ 84] (2d Cir. 1930) (L. Hand, J.), <i>cert. denied, </i>282 U.S. 902 (1931). Thus, where “the fundamental essence or structure of one work is duplicated in an <span class=SourcePN>&lt;23 USPQ2d 1249&gt;</span><A name="23USPQ2d1249"></A> other,” 3 Nimmer, Section 13.03 [A] [1], at 13-24 , courts have found copyright infringement. <i>See, e.g., Horgan v. Macmillan</i>, 789 F.2d 157, 162 [229 USPQ 684] (2d Cir. 1986) (recognizing that a book of photographs might infringe ballet choreography); <i>Twentieth Century-Fox Film Corp. v. MCA, Inc.,</i> 715 F.2d 1327, 1329 [217 USPQ 611] (9th Cir. 1983) (motion picture and television series); <i>Sid &amp; Marty Krofft Television Productions, Inc. v. McDonald’s Corp.,</i> 562 F.2d 1157, 1167 [196 USPQ 97] (9th Cir. 1977) (television commercial and television series); <i>Sheldon v. Metro-Goldwyn Pictures Corp.</i>, 81 F.2d 49, 55 [28 USPQ 330] (2d Cir.), <i>cert. denied,</i> 298 U.S. 669 (1936) (play and motion picture); <i>accord Stewart v. Abend</i>,495 U.S. 207, 238 [14 USPQ2d 1614] (1990) (recognizing that motion picture may infringe copyright in book by using its “unique setting, characters, plot, and sequence of events”). This black letter proposition is the springboard for our discussion. <span class=SourcePN>&lt;982 F.2d 702&gt;</span><A name="982F.2d702"></A> </p>

<h3>A. Copyright Protection for the Non-literal Elements of Computer Programs</h3>

<p class=Paragraph>It is now well settled that the literal elements of computer programs, i.e., their source and object codes, are the subject of copyright protection. <i>See Whelan</i>, 797 F.2d at 1233 (source and object code); <i>CMS Software Design Sys., Inc. v. Info Designs, Inc., </i>785 F.2d 1246, 1249 [229 USPQ 311] (5th Cir. 1986) (source code); <i>Apple Computer, Inc. v. Franklin Computer Corp.,</i> 714 F.2d 1240, 1249 [219 USPQ 113] (3d Cir. 1983), <i>cert. dismissed</i>, 464 U.S. 1033 (1984) (source and object code);<i>Williams Electronics, Inc. v. Artic Int’l, Inc., </i>685 F.2d 870, 876-77 [215 USPQ 405] (3d Cir. 1982) (object code). Here, as noted earlier, Altai admits having copied approximately 30% of the OSCAR 3.4 program from CA’s ADAPTER source code, and does not challenge the district court’s related finding of infringement.</p>

<p class=Paragraph>In this case, the hotly contested issues surround OSCAR 3.5. As recounted above, OSCAR 3.5 is the product of Altai’s carefully orchestrated rewrite of OSCAR 3.4. After the purge, none of the ADAPTER source code remained in the 3.5 version; thus, Altai made sure that the literal elements of its revamped OSCAR program were no longer substantially similar to the literal elements of CA’s ADAPTER.</p>

<p class=Paragraph>According to CA, the district court erroneously concluded that Altai’s OSCAR 3.5 was not substantially similar to its own ADAPTER program. CA argues that this occurred because the district court “committed legal error in analyzing [its] claims of copyright infringement by failing to find that copyright protects expression contained in the non-literal elements of computer software.” We disagree.</p>

<p class=Paragraph>CA argues that, despite Altai’s rewrite of the OSCAR code, the resulting program remained substantially similar to the <i>structure </i>of its ADAPTER program. As discussed above, a program’s structure includes its non-literal components such as general flow charts as well as the more specific organization of inter-modular relationships, parameter lists, and macros. In addition to these aspects, CA contends that OSCAR 3.5 is also substantially similar to ADAPTER with respect to the list of services that both ADAPTER and OSCAR obtain from their respective operating systems. We must decide whether and to what extent these elements of computer programs are protected by copyright law.</p>

<p class=Paragraph>The statutory terrain in this area has been well explored. <i>See Lotus Dev. Corp. v. Paperback Software Int’l,</i> 740 F. Supp. 37, 47-51 [15 USPQ2d 1577] (D. Mass. 1990); <i>see also Whelan,</i> 797 F.2d at 1240-42 ; Englund,at 885-90 ; Spivack, at 731-37 . The Copyright Act affords protection to “original works of authorship fixed in any tangible medium of expression.” 17 U.S.C. Section 102(a) . This broad category of protected “works” includes “literary works,” <i>id.,</i> which are defined by the act as</p>

<p class=BlockQuote>works, other than audiovisual works, expressed in words, numbers, or other verbal or numerical symbols or indicia, regardless of the nature of the material objects, such as books, periodicals, manuscripts, phonorecords, film tapes, disks, or cards, in which they are embodied.</p>

<p class=Paragraph>17 U.S.C. Section 101. While computer programs are not specifically listed as part of the above statutory definition, the legislative history leaves no doubt that Congress intended them to be considered literary works. <i>See</i> H.R.Rep. No. 1476, 94th Cong., 2d Sess. 54, <i>reprinted in</i> 1976 U.S. C. C. A. N. 5659, 5667 (hereinafter <i>“House Report”</i>); <i>Whelan</i>,797 F.2d at 1234 ; <i>Apple Computer</i>, 714 F.2d at 1247 .</p>

<p class=Paragraph>The syllogism that follows from the foregoing premises is a powerful one: if the non-literal structures of literary works are protected by copyright; and if computer programs are literary works, as we are told by the legislature; then the non-literal structures of computer programs are protected by copyright. <i>See Whelan,</i> 797 F.2d at 1234 (“By analogy to other literary works, it would thus appear that the copyrights of computer programs can be infringed even absent copying of the literal elements of the <span class=SourcePN>&lt;23 USPQ2d 1250&gt;</span><A name="23USPQ2d1250"></A> program.”). We have no reservation in joining the company of those courts that have already ascribed to this logic. <i>See, e.g., Johnson Controls, Inc. v. </i><span class=SourcePN>&lt;982 F.2d 703&gt;</span><A name="982F.2d703"></A> <i> Phoenix Control Sys., Inc.,</i> 886 F.2d 1173, 1175 [12 USPQ2d 1566] (9th Cir. 1989); <i>Lotus Dev. Corp.</i>, 740 F. Supp. at 54 ; <i>Digital Communications Assocs., Inc. v. Softklone Distrib. Corp.,</i> 659 F. Supp. 449, 455-56 [2 USPQ2d 1385] (N.D.Ga. 1987); <i>Q-Co Indus., Inc. v. Hoffman</i>, 625 F. Supp. 608, 615 [228 USPQ 554] (S.D.N.Y. 1985); <i>SAS Institute, Inc. v. S &amp; H Computer Sys., Inc.,</i> 605 F. Supp. 816, 829-30 [225 USPQ 916] (M.D.Tenn. 1985). However, that conclusion does not end our analysis. We must determine the scope of copyright protection that extends to a computer program’s non-literal structure.</p>

<p class=Paragraph>As a caveat, we note that our decision here does not control infringement actions regarding categorically distinct works, such as certain types of screen displays. These items represent products of computer programs, rather than the programs themselves, and fall under the copyright rubric of audiovisual works. If a computer audiovisual display is copyrighted separately as an audiovisual work, apart from the literary work that generates it (i.e., the program), the display may be protectable regardless of the underlying program’s copyright status. <i>See Stern Electronics, Inc. v. Kaufman,</i> 669 F.2d 852, 855 [213 USPQ 443] (2d Cir. 1982) (explaining that an audiovisual works copyright, rather than a copyright on the underlying program, extended greater protection to the sights and sounds generated by a computer video game because the same audiovisual display could be generated by different programs). Of course, the copyright protection that these displays enjoy extends only so far as their expression is protectable. <i>Data East USA, Inc. v. Epyx, Inc.,</i> 862 F.2d 204, 209 [9 USPQ2d 1322] (9th Cir. 1988). In this case, however, we are concerned not with a program’s display, but the program itself, and then with only its non-literal components. In considering the copyrightability of these components, we must refer to venerable doctrines of copyright law.</p>

<h4>1. Idea vs. Expression Dichotomy</h4>

<p class=Paragraph>It is a fundamental principle of copyright law that a copyright does not protect an idea, but only the expression of the idea. <i>See Baker v. Selden,</i> 101 U.S. 99 (1879); <i>Mazer v. Stein, </i>347U.S. 201, 217 [100 USPQ 325] (1954). This axiom of common law has been incorporated into the governing statute. Section 102(b) of the act provides:</p>

<p class=BlockQuote>In no case does copyright protection for an original work of authorship extend to any idea, procedure, process, system, method of operation, concept, principle, or discovery, regardless of the form in which it is described, explained, illustrated, or embodied in such work.</p>

<p class=Paragraph>17 U.S.C. Section 102(b) . <i>See also House Report, </i>at 5670 (“Copyright does not preclude others from using ideas or information revealed by the author’s work.”).</p>

<p class=Paragraph>Congress made no special exception for computer programs. To the contrary, the legislative history explicitly states that copyright protects computer programs only “to the extent that they incorporate authorship in programmer’s expression of original ideas, as distinguished from the ideas themselves.” <i>Id.</i><i> </i>at 5667; <i>see also id. </i>at 5670 (“Section 102(b) is intended&nbsp;.&nbsp;.&nbsp;. to make clear that the expression adopted by the programmer is the copyrightable element in a computer program, and that the actual processes or methods embodied in the program are not within the scope of copyright law.”).</p>

<p class=Paragraph>Similarly, the National Commission on New Technological Uses of Copyrighted Works (“CONTU”) established by Congress to survey the issues generated by the interrelationship of advancing technology and copyright law, <i>see</i>Pub.L.93-573, Section 201, 88 Stat. 1873 (1974), recommended, <i>inter alia, </i>that the 1976 Copyright Act “beamended&nbsp;.&nbsp;.&nbsp;. to make it explicit that computer programs, to the extent that they embody the author’s original creation, are proper subject matter for copyright.” <i>See </i>National Commission on New Technological Uses of Copyrighted Works, <i>Final Report</i> 1 (1979) (hereinafter “<i>CONTU Report </i>“). To that end, Congress adopted CONTU’s suggestions and amended the Copyright Act by adding, among other things, a provision to 17 U.S.C. Section 101 which defined the term “computer program.” <i>See</i>Pub.L. No. 96-517, Section 10(a), 94 Stat. <span class=SourcePN>&lt;982 F.2d 704&gt;</span><A name="982F.2d704"></A> 3028 (1980) . CONTU also “concluded that the idea-expression distinction should be used to determine which aspects of computer programs are copyrightable.” <i>Lotus Dev. Corp., </i>740 F.Supp. at 54 (citing <i>CONTU Report, </i>at 44) .</p>

<p class=Paragraph>Drawing the line between idea and expression is a tricky business. Judge Learned Hand noted that “[n]obody has ever been able to fix that boundary, and nobody ever can.” <i>Nichols, </i>45 F.2d at 121 . Thirty years later his convictions remained firm.”Obviously,no principle can be stated as to when an imitator has gone beyond copying the ‘idea,’ and has borrowed its ‘expression,’ “ Judge Hand concluded.”Decisions must therefore inevitably be <i>ad hoc.</i>” <i>Peter Pan Fabrics, Inc. v. Martin Weiner Corp., </i>274 <span class=SourcePN>&lt;23 USPQ2d 1251&gt;</span><A name="23USPQ2d1251"></A> F.2d 487, 489 [124 USPQ 154] (2d Cir. 1960).</p>

<p class=Paragraph>The essentially utilitarian nature of a computer program further complicates the task of distilling its idea from its expression. <i>See SAS Institute,</i> 605 F. Supp. at 829 ; <i>cf. </i>Englund, at 893 . In order to describe both computational processes and abstract ideas, its content “combines creative and technical expression.” <i>See </i>Spivack, at 755 . The variations of expression found in purely creative compositions, as opposed to those contained in utilitarian works, are not directed towards practical application. For example, a narration of Humpty Dumpty’s demise, which would clearly be a creative composition, does not serve the same ends as, say, a recipe for scrambled eggs&nbsp;– which is a more process oriented text. Thus, compared to aesthetic works, computer programs hover even more closely to the elusive boundary line described in Section 102(b).</p>

<p class=Paragraph>The doctrinal starting point in analyses of utilitarian works, is the seminal case of <i>Baker v. Selden, </i>101 U.S. 99 (1879) . In <i>Baker,</i>the Supreme Court faced the question of “whether the exclusive property in a system of bookkeeping can be claimed, under the law of copyright, by means of a book in which that system is explained?” <i>Id.</i><i> </i>at 101 . Selden had copyrighted a book that expounded a particular method of bookkeeping. The book contained lined pages with headings intended to illustrate the manner in which the system operated. Baker’s accounting publication included ledger sheets that employed “substantially the same ruled lines and headings.” <i>Id .</i>Selden’s testator sued Baker for copyright infringement on the theory that the ledger sheets were protected by Selden’s copyright.</p>

<p class=Paragraph>The Supreme Court found nothing copyrightable in Selden’s Bookkeeping system, and rejected his infringement claim regarding the ledger sheets. The Court held that:</p>

<p class=BlockQuote>The fact that the art described in the book by illustrations of lines and figures which are reproduced in practice in the application of the art, makes no difference. Those illustrations are the mere language employed by the author to convey his ideas more clearly. Had he used words of description instead of diagrams (which merely stand in the place of words), there could not be the slightest doubt that others, applying the art to practical use, might lawfully draw the lines and diagrams which were in the author’s mind, and which he thus described by words in his book.</p>

<p class=BlockQuote>The copyright of a work on mathematical science cannot give to the author an exclusive right to the methods of operation which he propounds, or to the diagrams which he employs to explain them, so as to prevent an engineer from using them whenever occasion requires. <i>Id.</i> at 103 .</p>

<p class=Paragraph>To the extent that an accounting text and a computer program are both “a set of statements or instructions&nbsp;.&nbsp;.&nbsp;. to bring about a certain result,” 17 U.S.C. Section 101 , they are roughly analogous. In the former case, the processes are ultimately conducted by human agency; in the latter, by electronic means. In either case, as already stated, the processes themselves are not protectable.But the holding in <i>Baker </i>goes farther. The Court concluded that those aspects of a work, which “must necessarily be used as incident to” the idea, system or process that the work describes, are also not copyrightable. 101 U.S. at 104 . Selden’s ledger sheets, therefore, enjoyed <span class=SourcePN>&lt;982 F.2d 705&gt;</span><A name="982F.2d705"></A> no copyright protection because they were “necessary incidents to” the system of accounting that he described. <i>Id</i>.at 103 . From this reasoning, we conclude that those elements of a computer program that are necessarily incidental to its function are similarly unprotectable.</p>

<p class=Paragraph>While <i>Baker v. Selden </i>provides a sound analytical foundation, it offers scant guidance on how to separate idea or process from expression, and moreover, on how to further distinguish protectable expression from that expression which “must necessarily be used as incident to” the work’s underlying concept. In the context of computer programs, the Third Circuit’s noted decision in <i>Whelan </i>has, thus far, been the most thoughtful attempt to accomplish these ends.</p>

<p class=Paragraph>The court in <i>Whelan </i>faced substantially the same problem as is presented by this case. There, the defendant was accused of making off with the non-literal structure of the plaintiff’s copyrighted dental lab management program, and employing it to create its own competitive version. In assessing whether there had been an infringement, the court had to determine which aspects of the programs involved were ideas, and which were expression. In separating the two, the court settled upon the following conceptual approach:</p>

<p class=BlockQuote>[T]he line between idea and expression may be drawn with reference to the end sought to be achieved by the work in question. In other words, <i>the purpose or function of a utilitarian work would be the work’s idea, and everything that is not necessary to that purpose or function would be part of the expression of the idea&nbsp;.</i>&nbsp;.&nbsp;.&nbsp;. Where there are various means of achieving the desired purpose, then the <span class=SourcePN>&lt;23 USPQ2d 1252&gt;</span><A name="23USPQ2d1252"></A> particular means chosen is not necessary to the purpose; hence, there is expression, not idea. 797 F.2d at 1236 (citations omitted).</p>

<p class=Paragraph>The “idea” of the program at issue in <i>Whelan </i>was identified by the court as simply “the efficient management of a dental laboratory.” <i>Id.</i> at n. 28 .</p>

<p class=Paragraph>So far, in the courts, the <i>Whelan </i>rule has received a mixed reception. While some decisions have adopted its reasoning, <i>see, e.g., Bull HN Information Sys., Inc. v. American Express Bank, Ltd., </i>1990 Copyright Law Dec. (CCH) Para. 26,555 at 23,278 (S.D.N.Y. 1990) ; <i>Dynamic Solutions, Inc. v. Planning &amp; Control, Inc., </i>1987 Copyright Law Dec. (CCH) Para. 26,062 at 20,912 (S.D.N.Y. 1987) ; <i>Broderbund Software Inc. v. Unison World, Inc., </i>648 F. Supp. 1127, 1133 [231 USPQ 700] (N.D.Cal.1986), others have rejected it. <i>See Plains Cotton Co-op v. Goodpasture Computer Service, Inc., </i>807 F.2d 1256, 1262 [1 USPQ2d 1635] (5th Cir.), <i>cert. denied,</i> 484 U.S. 821 (1987); <i>cf. Synercom Technology, Inc. v. University Computing Co., </i>462F.Supp. 1003, 1014 [199 USPQ 537] (N.D.Tex. 1978) (concluding that order and sequence of data on computer input formats was idea not expression).</p>

<p class=Paragraph><i>Whelan </i>has fared even more poorly in the academic community, where its standard for distinguishing idea from expression has been widely criticized for being conceptually overbroad.<i> See, e.g., </i>Englund, at 881; Menell, at 1074, 1082 ; Kretschmer, at 837-39 ; Spivack, at 747-55 ; Thomas M. Gage, Note, Whelan Associates v. Jaslow Dental Laboratories: <i>Copyright Protection for Computer Software Structure&nbsp;–</i> <i>What’s the Purpose?, </i>1987 Wis. L. Rev. 859, 860-61 (1987). The leading commentator in the field has stated that, “[t]he crucial flaw in [<i>Whelan’s]</i> reasoning is that it assumes that only one ‘idea,’ in copyright law terms, underlies any computer program, and that once a separable idea can be identified, everything else must be expression.” 3 Nimmer Section 13.03 [F], at 13-62.34 . This criticism focuses not upon the program’s ultimate purpose but upon the reality of its structural design. As we have already noted, a computer program’s ultimate function or purpose is the composite result of interacting subroutines. Since each subroutine is itself a program, and thus, may be said to have its own “idea,” <i>Whelan’s </i>general formulation that a program’s overall purpose equates with the program’s idea is descriptively inadequate.</p>

<p class=Paragraph>Accordingly, we think that Judge Pratt wisely declined to follow <i>Whelan. See </i><span class=SourcePN>&lt;982 F.2d 706&gt;</span><A name="982F.2d706"></A> <i>Computer Associates,</i>775 F.Supp. at 558-60 . In addition to noting the weakness in the <i>Whelan</i>definition of “program-idea,” mentioned above, Judge Pratt found that <i>Whelan’s</i>synonymous use of the terms “structure, sequence, and organization,” <i>see Whelan, </i>797 F.2d at 1224 n.1 , demonstrated a flawed understanding of a computer program’s method of operation.<i> See Computer Associates, </i>775 F.Supp.at 559-60 (discussing the distinction between a program’s “static structure” and “dynamic structure”). Rightly, the district court found <i>Whelan </i>‘s rationale suspect because it is so closely tied to what can now be seen&nbsp;– with the passage of time&nbsp;– as the opinion’s somewhat outdated appreciation of computer science.</p>

<h4>2. Substantial Similarity Test for Computer Program Structure: Abstraction-Filtration-Comparison</h4>

<a name="q">
<p class=Paragraph><span class=TreatiseQuoted>We think that Whelan’s approach to separating idea from expression in computer programs relies too heavily on metaphysical distinctions and does not place enough emphasis on practical considerations. </span><i>Cf. Apple Computer, </i>714 F.2d at 1253 (rejecting certain commercial constraints on programming as a helpful means of distinguishing idea from expression because they did “not enter into the somewhat metaphysical issue of whether particular ideas and expressions have merged”). <span class=TreatiseQuoted>As the cases that we shall discuss demonstrate, a satisfactory answer to this problem cannot be reached by resorting, <i>a priori</i>, to philosophical first principals.</span></p>

<p class=Paragraph><span class=TreatiseQuoted>As discussed herein, we think that district courts would be well-advised to undertake a three-step procedure, based on the abstractions test utilized by the district court, in order to determine whether the non-literal elements of two or more computer programs are substantially similar. This approach breaks no new ground; rather, it draws on such familiar copyright doctrines as merger,<i> scenes a faire</i>, and public domain. In taking this approach, however, we are cognizant that computer technology is a dynamic field which can quickly outpace judicial decisionmaking. Thus, in cases where the technology in question does not allow for a literal application of the procedure we outline below, our opinion, should not be read to foreclose the district courts of our circuit from utilizing a modified version.</span></p>

<p class=Paragraph><span class=TreatiseQuoted>In ascertaining substantial similarity under this approach, a court would first break down the allegedly infringed program into its constituent structural parts. Then, by examining each of these parts for such things as incorporated ideas, expression that is necessarily incidental to those ideas, and elements that are taken from the public domain, a court would then be able to sift out </span><span class=SourcePN>&lt;23 USPQ2d 1253&gt;</span><A name="23USPQ2d1253"></A> <span class=TreatiseQuoted>all non-protectable material. Left with a kernel, or possibly kernels, of creative expression after following this process of elimination, the court’s last step would be to compare this material with the structure of an allegedly infringing program. The result of this comparison will determine whether the protectable elements of the programs at issue are substantially similar so as to warrant a finding of infringement. It will be helpful to elaborate a bit further.</span></p>

<h5>Step One: Abstraction</h5>

<p class=Paragraph>As the district court appreciated, <i>see Computer Associates, </i>775 F. Supp. at 560 , the theoretic framework for analyzing substantial similarity expounded by Learned Hand in the <i>Nichols </i>case is helpful in the present context. In <i>Nichols,</i>we enunciated what has now become known as the “abstractions” test for separating idea from expression:</p>

<p class=BlockQuote>Upon any work&nbsp;.&nbsp;.&nbsp;. a great number of patterns of increasing generality will fit equally well, as more and more of the incident is left out. The last may perhaps be no more than the most general statement of what the [work] is about, and at times might consist only of its title; but there is a point in this series of abstractions where they are no longer protected, since otherwise the [author] could prevent the use of his “ideas,” to which, apart from their expression, his property is never extended.</p>

<p class=Paragraph><i>Nichols</i>, 45 F.2d at 121 .</p>

<p class=Paragraph>While the abstractions test was originally applied in relation to literary works such <span class=SourcePN>&lt;982 F.2d 707&gt;</span><A name="982F.2d707"></A> as novels and plays, it is adaptable to computer programs. In contrast to the <i>Whelan</i>approach, the abstractions test “implicitly recognizes that any given work may consist of a mixture of numerous ideas and expressions.” 3 Nimmer Section 13.03 [F] at 13-62.34-63 .</p>

<p class=Paragraph>As applied to computer programs, the abstractions test will comprise the first step in the examination for substantial similarity. Initially, in a manner that resembles reverse engineering on a theoretical plane, a court should dissect the allegedly copied program’s structure and isolate each level of abstraction contained within it. This process begins with the code and ends with an articulation of the program’s ultimate function. Along the way, it is necessary essentially to retrace and map each of the designer’s steps&nbsp;– in the opposite order in which they were taken during the program’s creation. <i>See</i> Background: Computer Program Design, <i>supra.</i></p>

<p class=Paragraph>As an anatomical guide to this procedure, the following description is helpful:</p>

<p class=BlockQuote>At the lowest level of abstraction, a computer program may be thought of in its entirety as a set of individual instructions organized into a hierarchy of modules. At a higher level of abstraction, the instructions in the lowest-level modules may be replaced conceptually by the functions of those modules. At progressively higher levels of abstraction, the functions of higher-level modules conceptually replace the implementations of those modules in terms of lower-level modules and instructions, until finally, one is left with nothing but the ultimate function of the program.&nbsp;.&nbsp;.&nbsp;. A program has structure at every level of abstraction at which it is viewed. At low levels of abstraction, a program’s structure may be quite complex; at the highest level it is trivial.</p>

<p class=Paragraph>Englund, at 897-98 . <i>Cf. </i>Spivack,at 774 .</p>

<h5>Step Two: Filtration</h5>

<p class=Paragraph>Once the program’s abstraction levels have been discovered, the substantial similarity inquiry moves from the conceptual to the concrete. Professor Nimmer suggests, and we endorse, a “successive filtering method” for separating protectable expression from non-protectable material. <i>See generally </i>3 Nimmer Section 13.03 [F] . This process entails examining the structural components at each level of abstraction to determine whether their particular inclusion at that level was “idea” or was dictated by considerations of efficiency, so as to be necessarily incidental to that idea; required by factors external to the program itself; or taken from the public domain and hence is non-protectable expression. <i>See also </i>Kretschmer,at 844-45 (arguing that program features dictated by market externalities or efficiency concerns are unprotectable). The structure of any given program may reflect some, all, or none of these considerations. Each case requires its own fact specific investigation.</p>

<p class=Paragraph>Strictly speaking, this filtration serves “the purpose of defining the scope of plaintiff’s copyright.” <i>Brown Bag Software v. Symantec Corp.,</i> No. 89-16239, slip op. 3719, 3738 [22 USPQ2d 1429] (9th Cir. April 7, 1992) (endorsing “analytic dissection” of computer programs in order to isolate protectable expression). By applying well developed doctrines of copyright law, it may ultimately leave behind a “core of protectable material.” 3 Nimmer Section 13.03 [F] [5], at 13-72 . Further explication of this second step may be helpful.</p>

<h6>(a) Elements Dictated by Efficiency.</h6>

<p class=Paragraph><span class=SourcePN>&lt;23 USPQ2d 1254&gt;</span><A name="23USPQ2d1254"></A> The portion of <i>Baker v. Selden, </i>discussed earlier, which denies copyright protection to expression necessarily incidental to the idea being expressed, appears to be the cornerstone for what has developed into the doctrine of merger. <i>See Morrissey v. Procter &amp; Gamble Co.</i>, 379 F.2d 675, 678-79 [154 USPQ 193] (1st Cir. 1967) (relying on <i>Baker </i>for the proposition that expression embodying the rules of a sweepstakes contest was inseparable from the idea of the contest itself, and therefore were not protectable by copyright); <i>see also Digital Communications</i>, 659 F. Supp. at 457 . The doctrine’s underlying principle is that “[w]hen there is essentially only one way to express an idea, the idea and its expression are inseparable <span class=SourcePN>&lt;982 F.2d 708&gt;</span><A name="982F.2d708"></A> and copyright is no bar to copying that expression.”<i>Concrete Machinery Co. v. Classic Lawn Ornaments, Inc.,</i> 843 F.2d 600, 606 [6 USPQ 1357] (1st Cir. 1988). Under these circumstances, the expression is said to have “merged” with the idea itself. In order not to confer a monopoly of the idea upon the copyright owner, such expression should not be protected. <i>See Herbert Rosenthal </i><span class=SourcePN>&lt;982 F.2d 709&gt;</span><A name="982F.2d709"></A> <i> Jewelry Corp. v. Kalpakian,</i> 446 F.2d 738, 742 [170 USPQ 557] (9th Cir. 1971).</p>

<p class=Paragraph>CONTU recognized the applicability of the merger doctrine to computer programs. In its report to Congress it stated that:</p>

<p class=BlockQuote>[C]opyrighted language may be copied without infringing when there is but a limited number of ways to express a given idea.&nbsp;.&nbsp;.&nbsp;. In the computer context, this means that when specific instructions, even though previously copyrighted, are the only and essential means of accomplishing a given task, their later use by another will not amount to infringement.</p>

<p class=Paragraph><i>CONTU Report </i>at 20 . While this statement directly concerns only the application of merger to program code, that is, the textual aspect of the program, it reasonably suggests that the doctrine fits comfortably within the general context of computer programs.</p>

<p class=Paragraph>Furthermore, when one considers the fact that programmers generally strive to create programs “that meet the user’s needs in the most efficient manner,” Menell, at 1052 , the applicability of the merger doctrine to computer programs becomes compelling. In the context of computer program design, the concept of efficiency is akin to deriving the most concise logical proof or formulating the most succinct mathematical computation. Thus, the more efficient a set of modules are, the more closely they approximate the idea or process embodied in that particular aspect of the program’s structure.</p>

<p class=Paragraph>While, hypothetically, there might be a myriad of ways in which a programmer may effectuate certain functions within a program,&nbsp;– i.e., express the idea embodied in a given subroutine&nbsp;– efficiency concerns may so narrow the practical range of choice as to make only one or two forms of expression workable options. <i>See</i>3 Nimmer Section 13.03 [F] [2], at 13-63 ; <i>see also Whelan, </i>797 F.2d at 1243 n.43 (“It is true that for certain tasks there are only a very limited number of file structures available, and in such cases the structures might not be copyrightable&nbsp;.&nbsp;.&nbsp;.”). Of course, not all program structure is informed by efficiency concerns. <i>See </i>Menell, at 1052 (besides efficiency, simplicity related to user accommodation has become a programming priority). It follows that in order to determine whether the merger doctrine precludes copyright protection to an aspect of a program’s structure that is so oriented, a court must inquire “whether the use of <i>this particular set </i>of modules is necessary efficiently to implement that part of the program’s process” being implemented. Englund, at 902 . If the answer is yes, then the expression represented by the programmer’s choice of a specific module or group of modules has merged with their underlying idea and is unprotected. <i>Id.</i><i> </i>at 902-03 .</p>

<p class=Paragraph>Another justification for linking structural economy with the application of the merger doctrine stems from a program’s essentially utilitarian nature and the competitive forces that exist in the software marketplace. <i>See </i>Kretschmer,at 842 . Working in tandem, these factors give rise to a problem of proof which merger helps to eliminate.</p>

<p class=Paragraph>Efficiency is an industry-wide goal. Since, as we have already noted, there may be only a limited number of efficient implementations for any given program task, it is quite possible that multiple programmers, working independently, will design the identical method employed in the allegedly infringed work. Of course, if this is the case, there is no copyright infringement. <i>See Roth Greeting Cards v. United Card Co., </i>429 F.2d 1106, 1110 [166 USPQ 291] (9th Cir. 1970); <i>Sheldon,</i> 81 F.2d at 54 .</p>

<p class=Paragraph>Under these circumstances, the fact that two programs contain the same efficient structure may as likely lead to an inference of independent creation as it does to one of copying. <i>See</i> 3 Nimmer Section 13.03[F] [2], at 13-65 ; <i>cf. Herbert Rosenthal Jewelry Corp.,</i> 446 F.2d at 741 (evidence of independent creation may stem from defendant’s standing as a designer of previous similar works). Thus, since evidence of similarly efficient structure is not particularly probative of copying, it should be disregarded in the over <span class=SourcePN>&lt;23 USPQ2d 1255&gt;</span><A name="23USPQ2d1255"></A> all substantial similarity analysis. <i>See</i> 3 Nimmer Section 13.03[F][2], at 13-65 .</p>

<p class=Paragraph>We find support for applying the merger doctrine in cases that have already addressed the question of substantial similarity in the context of computer program structure. Most recently, in <i>Lotus Dev. Corp.,</i> 740 F. Supp. at 66 , the district court had before it a claim of copyright infringement relating to the structure of a computer spreadsheet program. The court observed that “the basic spreadsheet screen display that resembles a rotated ‘L’&nbsp;.&nbsp;.&nbsp;., if not present in every expression of such a program, is present in most expressions.” <i>Id . </i>Similarly, the court found that “an essential detail present in most if not all expressions of an electronic spreadsheet&nbsp;– is the designation of a particular key that, when pressed, will invoke the menu command system.” <i>Id . </i>Applying the merger doctrine, the court denied copyright protection to both program elements.</p>

<p class=Paragraph>In <i>Manufacturers Technologies, Inc. v. Cams, Inc.,</i> 706 F. Supp. 984, 995-99 [10 USPQ2d 1321] (D. Conn. 1989), the infringement claims stemmed from various alleged program similarities “as indicated in their screen displays.” <i>Id.</i><i> </i>at 990 . Stressing efficiency concerns in the context of a merger analysis, the court determined that the program’s method of allowing the user to navigate within the screen displays was not protectable because, in part, “the process or manner of navigating internally on any specific screen displays&nbsp;.&nbsp;.&nbsp;. is limited in the number of ways it may be simply achieved to facilitate user comfort.” <i>Id.</i><i> </i>at 995 . The court also found that expression contained in various screen displays (in the form of alphabetical and numerical columns), was not the proper subject of copyright protection because it was “necessarily incident to the idea [s]” embodied in the displays. <i>Id.</i><i> </i>at 996, 998 . <i>Cf. Digital Communications,</i> 659 F. Supp. at 460 (finding no merger and affording copyright protection to program’s status screen display because “modes of expression chosen&nbsp;.&nbsp;.&nbsp;. are clearly not necessary to the idea of the status screen”).</p>

<p class=Paragraph>We agree with the approach taken in these decisions, and conclude that application of the merger doctrine in this setting is an effective way to eliminate non-protectable expression contained in computer programs.</p>

<h6>(b) Elements Dictated By External Factors</h6>

<p class=Paragraph>We have stated that where “it is virtually impossible to write about a particular historical era or fictional theme without employing certain ‘stock’ or standard literary devices,” such expression is not copyrightable. <i>Hoehling v. Universal City Studios, Inc.</i>, 618 F.2d 972, 979 [205 USPQ 681] (2d Cir.), <i>cert. denied,</i> 449 U.S. 841 [207 USPQ 1064] (1980). For example, the <i>Hoehling </i>case was an infringement suit stemming from several works on the Hindenberg disaster. There we concluded that similarities in representations of German beer halls, scenes depicting German greetings such as “Heil Hitler,” or the singing of certain German songs would not lead to a finding of infringement because they were “ ‘indispensable, or at least standard, in the treatment of’ “ life in Nazi Germany. <i>Id .</i> (quoting <i>Alexander v. Haley</i>, 460 F. Supp. 40, 45 [200 USPQ 239] (S.D.N.Y. 1978)). This is known as the <i>scenes a faire </i>doctrine, and like “merger,” it has its analogous application to computer programs. <i>Cf. Data East USA</i>, 862 F.2d at 208 (applying <i>scenes a faire</i> to a home computer video game).</p>

<p class=Paragraph>Professor Nimmer points out that “in many instances it is virtually impossible to write a program to perform particular functions in a specific computing environment without employing standard techniques.” 3 Nimmer Section 13.03 [F] [3], at 13-65 . This is a result of the fact that a programmer’s freedom of design choice is often circumscribed by extrinsic considerations such as (1) the mechanical specifications of the computer on which a particular program <span class=SourcePN>&lt;982 F.2d 710&gt;</span><A name="982F.2d710"></A> is intended to run; (2) compatibility requirements of other programs with which a program is designated to operate in conjunction; (3) computer manufacturers’ design standards; (4) demands of the industry being serviced; and (5) widely accepted programming practices within the computer industry.<i> </i><i>Id.</i><i> </i>at 13-66-71 .</p>

<p class=Paragraph>Courts have already considered some of these factors in denying copyright protection to various elements of computer programs. In the <i>Plains Cotton </i>case, the Fifth Circuit refused to reverse the district court’s denial of a preliminary injunction against an alleged program infringer because, in part, “many of the similarities between the&nbsp;.&nbsp;.&nbsp;. programs [were] dictated by the externalities of the cotton market.” 807 F.2d at 1262 .</p>

<p class=Paragraph>In <i>Manufacturers Technologies, </i>the district court noted that the program’s method of screen navigation “is influenced by the type of hardware that the software is designed to be used on.” 706 F.Supp. at 995 . Because, in part, “the functioning of the hardware package impact[ed]and constrain [ed] the type of navigational tools used in plaintiff’s screen displays,” the court denied copyright protection to that aspect of the program.<i>Cf. Data East USA, </i>862 F.2d at 209 (reversing a district court’s finding of audio-visual work infringement because, <i>inter</i> <span class=SourcePN>&lt;23 USPQ2d 1256&gt;</span><A name="23USPQ2d1256"></A> <i>alia, “the use of the Commodore computer for a karate game intended for home consumption is subject to various constraints inherent in the use of that computer”).</i></p>

<p class=Paragraph>Finally, the district court in <i>Q-Co Industries </i>rested its holding on what, perhaps, most closely approximates a traditional <i>scenes a faire</i>rationale. There, the court denied copyright protection to four program modules employed in a teleprompter program. This decision was ultimately based upon the court’s finding that “the same modules would be an inherent part of any prompting program.” 625 F.Supp.at 616 .</p>

<p class=Paragraph>Building upon this existing case law, we conclude that a court must also examine the structural content of an allegedly infringed program for elements that might have been dictated by external factors.</p>

<h6>(c) Elements taken From the Public Domain</h6>

<p class=Paragraph>Closely related to the non-protectability of <i>scenes a faire, </i>is material found in the public domain. Such material is free for the taking and cannot be appropriated by a single author even though it is included in a copyrighted work. <i>See E.F. Johnson Co. v. Uniden Corp. of </i><i>America</i><i>,</i>623 F.Supp. 1485, 1499 [228 USPQ 891] (D. Minn. 1985);<i> see also Sheldon,</i>81 F.2d at 54 . We see no reason to make an exception to this rule for elements of a computer program that have entered the public domain by virtue of freely accessible program exchanges and the like. <i>See </i>3 Nimmer Section 13.03 [F] ; <i>see also Brown Bag Software, </i>slip op. at 3732 (affirming the district court’s finding that “‘[p]laintiffs may not claim copyright protection of an&nbsp;.&nbsp;.&nbsp;. expression that is, if not standard, then commonplace in the computer software industry.’“). Thus, a court must also filter out this material from the allegedly infringed program before it makes the final inquiry in its substantial similarity analysis.</p>

<h5>Step Three: Comparison</h5>

<p class=Paragraph>The third and final step of the test for substantial similarity that we believe appropriate for non-literal program components entails a comparison. Once a court has sifted out all elements of the allegedly infringed program which are “ideas” or are dictated by efficiency or external factors, or taken from the public domain, there may remain a core of protectable expression. In terms of a work’s copyright value, this is the golden nugget. <i>See Brown Bag Software, </i>slip op. at 3738 . At this point, the court’s substantial similarity inquiry focuses on whether the defendant copied any aspect of this protected expression, as well as an assessment of the copied portion’s relative importance with respect to the plaintiff’s overall program. <i>See</i>3 Nimmer Section 13.03 [F] ; <i>Data East USA,</i> 862 F.2d at 208 (“To determine whether similarities result from unprotectable expression, analytic dissection of <i>similarities </i>may be <span class=SourcePN>&lt;982 F.2d 711&gt;</span><A name="982F.2d711"></A> performed. If&nbsp;.&nbsp;.&nbsp;. all similarities in expression arise from use of common ideas, then no substantial similarity can be found.”)</p>

<p class=Paragraph>3) <i>Policy Considerations</i> We are satisfied that the three step approach we have just outlined not only comports with, but advances the constitutional policies underlying the copyright act. Since any method that tries to distinguish idea from expression ultimately impacts on the scope of copyright protection afforded to a particular type of work, “the line [it draws] must be a pragmatic one, which also keeps in consideration ‘the preservation of the balance between competition and protection.’ “ <i>Apple Computer</i>, 714 F.2d at 1253 (citation omitted).</p>

<p class=Paragraph>CA and some <i>amici </i>argue against the type of approach that we have set forth on the grounds that it will be a disincentive for future computer program research and development. At bottom, they claim that if programmers are not guaranteed broad copyright protection for their work, they will not invest the extensive time, energy and funds required to design and improve program structures. While they have a point, their argument cannot carry the day. The interest of the copyright law is not in simply conferring a monopoly on industrious persons, but in advancing the public welfare through rewarding artistic creativity, in a manner that permits the free use and development of non-protectable ideas and processes.</p>

<p class=Paragraph>In this respect, our conclusion is informed by Justice Stewart’s concise discussion of the principles that correctly govern the adaptation of the copyright law to new circumstances. In <i>Twentieth Century Music Corp. v. Aiken</i>, he wrote:</p>

<p class=BlockQuote>The limited scope of the copyright holder’s statutory monopoly, like the limited copyright duration required by the Constitution, reflects a balance of competing claims upon the public interest: Creative work is to be encouraged and rewarded, but private motivation must ultimately serve the cause of promoting broad public availability of literature, music, and the other arts.</p>

<p class=BlockQuote>The immediate effect of our copyright law is to secure a fair return for an “author’s<span class=SourcePN>&lt;23 USPQ2d 1257&gt;</span><A name="23USPQ2d1257"></A> ” creative labor. But the ultimate aim is, by this incentive, to stimulate artistic creativity for the general public good.&nbsp;.&nbsp;.&nbsp;. When technological change has rendered its literal terms ambiguous, the Copyright Act must be construed in light of this basic purpose.</p>

<p class=Paragraph>422 U.S. 151, 156 [186 USPQ 65] (1975) (citations and footnotes omitted).</p>

<p class=Paragraph>Recently, the Supreme Court has emphatically reiterated that “[t]he primary objective of copyright is not to reward the <i>labor </i>of authors.&nbsp;.&nbsp;.&nbsp;.”<i>Feist Publications, Inc. v. Rural Telephone Service Co., Inc., </i>111 S. Ct. 1282, 1290 [18 USPQ2d 1275] (1991) (emphasis added). While the <i>Feist </i>decision deals primarily with the copyrightability of purely factual compilations, its underlying tenets apply to much of the work involved in computer programming. <i>Feist </i>put to rest the “sweat of the brow” doctrine in copyright law. <i>Id.</i><i> </i>at 1295 . The rationale of that doctrine “was that copyright was a reward for the hard work that went into compiling facts.” <i>Id.</i><i> </i>at 1291 . The Court flatly rejected this justification for extending copyright protection, noting that it “eschewed the most fundamental axiom of copyright law&nbsp;– that no one may copyright facts or ideas.” <i>Id .</i></p>

<p class=Paragraph><i>Feist </i>teaches that substantial effort alone cannot confer copyright status on an otherwise uncopyrightable work. As we have discussed, despite the fact that significant labor and expense often goes into computer program flow-charting and debugging, that process does not always result in inherently protectable expression. Thus, <i>Feist</i> implicitly undercuts the <i>Whelan</i> rationale, “which allow [ed] copyright protection beyond the literal computer code&nbsp;.&nbsp;.&nbsp;. [in order to] provide the proper incentive for programmers by protecting their most valuable efforts.” <i>Whelan,</i> 797 F.2d at 1237 (footnote omitted). We note that <i>Whelan </i>was decided prior to <i>Feist </i>when the “sweat of the brow” doctrine still had vitality. In view of the Supreme <span class=SourcePN>&lt;982 F.2d 712&gt;</span><A name="982F.2d712"></A> Court’s recent holding, however, we must reject the legal basis of CA’s disincentive argument.</p>

<p class=Paragraph>Furthermore, we are unpersuaded that the test we approve today will lead to the dire consequences for the computer program industry that plaintiff and some <i>amici </i>predict. To the contrary, serious students of the industry have been highly critical of the sweeping scope of copyright protection engendered by the <i>Whelan </i>rule, in that it “enables first comers to ‘lock up’ basic programming techniques as implemented in programs to perform particular tasks.” Menell, at 1087 ; <i>see also</i>Spivack, at 765 (<i>Whelan</i>“results in an inhibition of creation by virtue of the copyright owner’s quasi-monopoly power”).</p>

<p class=Paragraph>To be frank, the exact contours of copyright protection for non-literal program structure are not completely clear. We trust that as future cases are decided, those limits will become better defined. Indeed, it may well be that the Copyright Act serves as a relatively weak barrier against public access to the theoretical interstices behind a program’s source and object codes. This results from the hybrid nature of a computer program, which, while it is literary expression, is also a highly functional, utilitarian component in the larger process of computing.</p>

<p class=Paragraph>Generally, we think that copyright registration&nbsp;– with its indiscriminating availability&nbsp;– is not ideally suited to deal with the highly dynamic technology of computer science. Thus far, many of the decisions in this area reflect the courts’ attempt to fit the proverbial square peg in a round hole. The district court, <i>see Computer Associates,</i> 775 F. Supp. at 560 , and at least one commentator has suggested that patent registration, with its exacting up-front novelty and non-obviousness requirements, might be the more appropriate rubric of protection for intellectual property of this kind. <i>See</i>Randell M. Whitmeyer,Comment, <i>A Plea for Due Processes: Defining the Proper Scope of Patent Protection for Computer Software</i>, 85 Nw. U. L. Rev. 1103, 1123-25 (1991) ; <i>see also Lotus Dev. Corp. v. Borland Int’l, Inc.,</i> 788 F. Supp. 78, ___ [22 USPQ2d 1641] (D. Mass. 1992) (discussing the potentially supplemental relationship between patent and copyright protection in the context of computer programs). In any event, now that more than 12 years have passed since CONTU issued its final report, the resolution of this specific issue could benefit from further legislative investigation&nbsp;– perhaps a CONTU II.</p>

<p class=Paragraph>In the meantime, Congress has made clear that computer programs are literary works entitled to copyright protection. Of course, we shall abide by these instructions, but in so doing we must not impair the overall integrity of copyright law. While incentive based arguments in favor of broad copyright protection are perhaps attractive from a pure policy perspective, <i>see Lotus Dev. Corp.,</i> 740 F. Supp. at 58 , ultimately, they have a corrosive effect on certain fundamental tenets of copyright doctrine. If the test we have outlined results in narrowing the scope of protection, as we expect it will, that result flows from applying, in accordance with Congressional intent, long-standing principles of copyright law to computer programs. Of course, our decision is also informed by our <span class=SourcePN>&lt;23 USPQ2d 1258&gt;</span><A name="23USPQ2d1258"></A> concern that these fundamental principles remain undistorted.</p>

<h3>B. The District Court Decision</h3>

<p class=Paragraph>We turn now to our review of the district court’s decision in this particular case. At the outset, we must address CA’s claim that the district court erred by relying too heavily on the court appointed expert’s “personal opinions on the factual and legal issues before the court.”</p>

<h4>1. Use of Expert Evidence in Determining Substantial Similarity Between Computer Programs</h4>

<p class=Paragraph>Pursuant to Fed. R. Evid. 706, and with the consent of both Altai and CA, Judge Pratt appointed and relied upon Dr. Randall Davis of the Massachusetts Institute of Technology as the court’s own expert witness on the issue of substantial similarity. Dr. Davis submitted a comprehensive written report that analyzed the various aspects of the computer programs <span class=SourcePN>&lt;982 F.2d 713&gt;</span><A name="982F.2d713"></A> at issue and evaluated the parties’ expert evidence. At trial, Dr. Davis was extensively cross-examined by both CA and Altai.</p>

<p class=Paragraph>The well-established general rule in this circuit has been to limit the use of expert opinion in determining whether works at issue are substantially similar. As a threshold matter, expert testimony may be used to assist the fact finder in ascertaining whether the defendant had copied any part of the plaintiff’s work. <i>See Arnstein v. Porter, </i>154 F.2d 464, 468 [68 USPQ 288] (2d Cir. 1946). To this end, “the two works are to be compared in their entirety&nbsp;.&nbsp;.&nbsp;. [and] in making such comparison resort may properly be made to expert analysis.&nbsp;.&nbsp;.&nbsp;.” 3 Nimmer Section 13.03 [E], at 13-62.16 .</p>

<p class=Paragraph>However, once some amount of copying has been established, it remains solely for the trier-of-fact to determine whether the copying was “illicit,” that is to say, whether the “defendant took from plaintiff’s works so much of what is pleasing to [lay observers] who comprise the audience for whom such [works are] composed, that defendant wrongfully appropriated something which belongs to the plaintiff.” <i>Arnstein, </i>154 F.2d at 473 . Since the test for illicit copying is based upon the response of ordinary lay observers, expert testimony is thus “irrelevant” and not permitted. <i>Id.</i><i> </i>at 468, 473 . We have subsequently described this method of inquiry as “merely an alternative way of formulating the issue of substantial similarity.” <i>Ideal Toy Corp. v. Fab-Lu Ltd. (Inc.), </i>360 F.2d 1021, 1023 n.2 [149 USPQ 800] (2d Cir. 1966).</p>

<p class=Paragraph>Historically, <i>Arnstein’s </i>ordinary observer standard had its roots in “an attempt to apply the ‘reasonable person’ doctrine as found in other areas of the law to copyright.” 3 Nimmer Section 13.03 [E] [2], at 13-62. 10-11 . That approach may well have served its purpose when the material under scrutiny was limited to art forms readily comprehensible and generally familiar to the average lay person. However, in considering the extension of the rule to the present case, we are reminded of Holmes’ admonition that, “[t]he life of the law has not been logic: it has been experience.” O. W. Holmes, Jr., THE COMMON LAW 1 (1881) .</p>

<p class=Paragraph>Thus, in deciding the limits to which expert opinion may be employed in ascertaining the substantial similarity of computer programs, we cannot disregard the highly complicated and technical subject matter at the heart of these claims. Rather, we recognize the reality that computer programs are likely to be somewhat impenetrable by lay observers&nbsp;– whether they be judges or juries&nbsp;– and, thus, seem to fall outside the category of works contemplated by those who engineered the <i>Arnstein</i> test. <i>Cf. Dawson v. Hinshaw Music, Inc., </i>905 F.2d 731, 737 [15 USPQ2d 1132] (4th Cir.), <i>cert. denied,</i> 111 S.Ct. 511 (1990) (“departure from the lay characterization is warranted only where the intended audience possesses ‘specialized expertise’ “). As Judge Pratt correctly observed:</p>

<p class=BlockQuote>In the context of computer programs, many of the familiar tests of similarity prove to be inadequate, for they were developed historically in the context of artistic and literary, rather than utilitarian, works.</p>

<p class=Paragraph><i>Computer Associates, </i>775 F.Supp. at 558 .</p>

<p class=Paragraph>In making its finding on subtantial similarity with respect to computer programs, we believe that the trier of fact need not be limited by the strictures of its own lay perspective. <i>See </i><i>Dawson</i>, 905 F.2d at 735 ; <i>Whelan, </i>797 F.2d at 1233 ; <i>Broderbund, </i>648 F.Supp.at 1136 (stating in <i>dictum </i>: “an integrated test involving expert testimony and analytic dissection may well be the wave of the future in this area”); <i>Brown Bag Software</i>, slip op. at 3743-44 (Sneed, J., concurring); <i>see also</i> 3 Nimmer Section 13.03 [E] [4] ; <i>but see Brown Bag Software, </i>slip op. at 3736-37 (applying the “ordinary reasonable person” standard in substantial similarity test for computer programs). Rather, we leave it to the discretion of the district court to decide to what extent, if any, expert opinion, regarding the highly technical nature of computer programs, is warranted in a given case.<span class=SourcePN>&lt;23 USPQ2d 1259&gt;</span><A name="23USPQ2d1259"></A> </p>

<p class=Paragraph>In so holding, we do not intend to disturb the traditional role of lay observers in judging <span class=SourcePN>&lt;982 F.2d 714&gt;</span><A name="982F.2d714"></A> substantial similarity in copyright cases that involve the aesthetic arts, such as music, visual works or literature.</p>

<p class=Paragraph>In this case, Dr. Davis’ opinion was instrumental in dismantling the intricacies of computer science so that the court could formulate and apply an appropriate rule of law. While Dr. Davis’ report and testimony undoubtedly shed valuable light on the subject matter of the litigation, Judge Pratt remained, in the final analysis, the trier of fact. The district court’s use of the expert’s assistance, in the context of this case, was entirely appropriate.</p>

<h4>2. Evidentiary Analysis</h4>

<p class=Paragraph>The district court had to determine whether Altai’s OSCAR 3.5 program was substantially similar to CA’s ADAPTER. We note that Judge Pratt’s method of analysis effectively served as a road map for our own, with one exception&nbsp;– Judge Pratt filtered out the non-copyrightable aspects of OSCAR 3.5 rather than those found in ADAPTER, the allegedly infringed program. We think that our approach&nbsp;– i.e., filtering out the unprotected aspects of an allegedly infringed program and then comparing the end product to the structure of the suspect program&nbsp;– is preferable, and therefore believe that district courts should proceed in this manner in future cases.</p>

<p class=Paragraph>We opt for this strategy because, in some cases, the defendant’s program structure might contain protectable expression and/or other elements that are not found in the plaintiff’s program. Since it is extraneous to the allegedly copied work, this material would have no bearing on any potential substantial similarity between the two programs. Thus, its filtration would be wasteful and unnecessarily time consuming. Furthermore, by focusing the analysis on the infringing rather than on the infringed material, a court may mistakenly place too little emphasis on a quantitatively small misappropriation which is, in reality, a qualitatively vital aspect of the plaintiff’s protectable expression.</p>

<p class=Paragraph>The fact that the district court’s analysis proceeded in the reverse order, however, had no material impact on the outcome of this case. Since Judge Pratt determined that OSCAR effectively contained no protectable expression whatsoever, the most serious charge that can be levelled against him is that he was overly thorough in his examination.</p>

<p class=Paragraph>The district court took the first step in the analysis set forth in this opinion when it separated the program by levels of abstraction. The district court stated:</p>

<p class=BlockQuote>As applied to computer software programs, this abstractions test would progress in order of “increasing generality” from object code, to source code, to parameter lists, to services required, to general outline. In discussing the particular similarities, therefore, we shall focus on these levels.</p>

<p class=Paragraph><i>Computer Associates,</i> 775 F. Supp. at 560 . While the facts of a different case might require that a district court draw a more particularized blueprint of a program’s overall structure, this description is a workable one for the case at hand.</p>

<p class=Paragraph>Moving to the district court’s evaluation of OSCAR 3.5’s structural components, we agree with Judge Pratt’s systematic exclusion of non-protectable expression. With respect to code, the district court observed that after the rewrite of OSCAR 3.4 to OSCAR 3.5, “there remained virtually no lines of code that were identical to ADAPTER.” <i>Id.</i><i> </i>at 561 . Accordingly, the court found that the code “present [ed] no similarity at all.” <i>Id.</i>at 562 .</p>

<p class=Paragraph>Next, Judge Pratt addressed the issue of similarity between the two programs’ parameter lists and macros. He concluded that, viewing the conflicting evidence most favorably to CA, it demonstrated that “only a few of the lists and macros were similar to protected elements in ADAPTER; the others were either in the public domain or dictated by the functional demands of the program.” <i>Id.</i><i> </i>As discussed above, functional elements and elements taken from the public domain do not qualify for copyright protection. With respect to the few remaining parameter lists and macros, the district court could reasonably conclude that they did not warrant a <span class=SourcePN>&lt;982 F.2d 715&gt;</span><A name="982F.2d715"></A> finding of infringement given their relative contribution to the overall program. <i>See Warner Bros., Inc. v. American Broadcasting Cos., Inc.,</i> 720 F.2d 231, 242 [222 USPQ 101] (2d Cir. 1983) (discussing <i>de minimis </i>exception which allows for literal copying of a small and usually insignificant portion of the plaintiff’s work); 3 Nimmer Section 13.03 [F] [5], at 13-74 . In any event, the district court reasonably found that, for lack of persuasive evidence, CA failed to meet its burden of proof on whether the macros and parameter lists at issue were substantially similar. <i>See Computer Associates</i>, 775 F. Supp. at 562 .</p>

<p class=Paragraph>The district court also found that the overlap exhibited between the list of services required for both ADAPTER and OSCAR 3.5 was “determinated by the demands of the operating system and of the applications program to which it [was] to be linked <span class=SourcePN>&lt;23 USPQ2d 1260&gt;</span><A name="23USPQ2d1260"></A> through ADAPTER or OSCAR.” <i>Id . </i>In other words, this aspect of the program’s structure was dictated by the nature of other programs with which it was designed to interact and, thus, is not protected by copyright.</p>

<p class=Paragraph>Finally, in his infringement analysis, Judge Pratt accorded no weight to the similarities between the two programs’ organizational charts, “because [the charts were] so simple and obvious to anyone exposed to the operation of the program [s].” <i>Id . </i>CA argues that the district court’s action in this regard “is not consistent with copyright law”&nbsp;– that “obvious” expression is protected, and that the district court erroneously failed to realize this. However, to say that elements of a work are “obvious,” in the manner in which the district court used the word, is to say that they “follow naturally from the work’s theme rather than from the author’s creativity.” 3 Nimmer Section 13.03 [F] [3], at 13-65 . This is but one formulation of the <i>scenes a faire </i>doctrine, which we have already endorsed as a means of weeding out unprotectable expression.</p>

<p class=Paragraph>CA argues, at some length, that many of the district court’s factual conclusions regarding the creative nature of its program’s components are simply wrong. Of course, we are limited in our review of factual findings to setting aside only those that we determine are clearly erroneous. <i>See </i>Fed. R. Civ.P. 52 . Upon a thorough review of the voluminous record in this case, which is comprised of conflicting testimony and other highly technical evidence, we discern no error on the part of Judge Pratt, let alone clear error.</p>

<p class=Paragraph>Since we accept Judge Pratt’s factual conclusions and the results of his legal analysis, we affirm his dismissal of CA’s copyright infringement claim based upon OSCAR 3.5. We emphasize that, like all copyright infringement cases, those that involve computer programs are highly fact specific. The amount of protection due structural elements, in any given case, will vary according to the protectable expression found to exist within the program at issue.</p>

<h2>II. Trade Secret Preemption</h2>

<p class=Paragraph>As part of its claim for relief, CA alleged that Altai had misappropriated the trade secrets contained in its ADAPTER program. Prior to trial, while the proceedings were still before Judge Mishler, Altai moved for summary judgment on CA’s trade secret misappropriation claim. Altai argued that section 301 of the Copyright Act had preempted CA’s state law cause of action as it applied in this case. Judge Mishler denied Altai’s motion, reasoning that “[t]he elements of the tort of appropriation of trade secrets through the breach of contract or confidence by an employee are not the same as the elements of a claim of copyright infringement.” <i>Computer Associates, </i>775 F. Supp. at 563. [Note: The Second Circuit, upon rehearing, replaced the text reported in 23 USPQ2d 1241 with the text below.]</p>

<p class=Paragraph>The parties addressed the preemption issue again, both in pre-and post-trial briefs. Judge Pratt then reconsidered and reversed Judge Mishler’s earlier ruling. The district court concluded that CA’s trade secret claims were preempted because “CA&nbsp;– which is the master of its own case&nbsp;– has pleaded and proven facts which establish that one act constituted both copyright infringement <i>and</i> misappropriation of trade secrets [namely, the] copying <span class=SourcePN>&lt;982 F.2d 716&gt;</span><A name="982F.2d716"></A> of ADAPTER into OSCAR 3.4&nbsp;.&nbsp;.&nbsp;.” <i>Computer Assocs.,</i> 775 F. Supp. at 565.</p>

<p class=Paragraph>In our original opinion, <i>Computer Assocs. Int’l, Inc. v. Altai, Inc.,</i> 1992 U.S. App. LEXIS 14305 (2d Cir. 1992), we affirmed Judge Pratt’s decision. CA petitioned for rehearing on this issue. In its petition for rehearing, CA brought to our attention portions of the record below that were not included in the appendix on appeal. CA argued that these documents, along with Judge Mishler’s disposition of Altai’s motion to dismiss and for summary judgment, established that CA advanced non-preempted trade secret misappropriation claims before both Judge Mishler and Judge Pratt. CA further contended that Judge Pratt failed to consider its theory that Altai was liable for wrongful acquisition of CA’s trade secrets through Arney. Upon reconsideration, we have granted the petition for rehearing, withdrawn our initial opinion, and conclude in this amended opinion that the district court’s preemption ruling on CA’s trade secret claims should be vacated. We accordingly vacate the judgment of the district court on this point and remand CA’s trade secret claims for a determination on the merits.</p>

<h3>A. General Law of Copyright Preemption Regarding Trade Secrets and Computer Programs</h3>

<p class=Paragraph>Congress carefully designed the statutory framework of federal copyright preemption. In order to insure that the enforcement of these rights remains solely within the federal domain, section 301(a) of the Copyright Act expressly preempts</p>

<p class=BlockQuote>all legal or equitable rights that are equivalent to any of the exclusive rights within the general scope of copyright as specified by section 106 in works of authorship that are fixed in a tangible medium of expression and come within the subject matter of copyright as specified by sections 102 and 103&nbsp;.&nbsp;.&nbsp;.</p>

<p class=Paragraph>17 U.S.C. § 301(a). This sweeping displacement of state law is, however, limited by section 301(b), which provides, in relevant part, that</p>

<p class=BlockQuote>nothing in this title annuls or limits any rights or remedies under the common law or statutes of any State with respect to&nbsp;.&nbsp;.&nbsp;. activities violating legal or equitable rights that are not equivalent to any of the exclusive rights within the general scope of copyright as specified by section 106.&nbsp;.&nbsp;.&nbsp;.</p>

<p class=Paragraph>17 U.S.C. § 301(b)(3). Section 106, in turn, affords a copyright owner the exclusive right to: (1) reproduce the copyrighted work; (2) prepare derivative works; (3) distribute copies of the work by sale or otherwise; and, with respect to certain artistic works, (4) perform the work publicly; and (5) display the work publicly. <i>See</i> 17 U.S.C. § 106(1)-(5).</p>

<p class=Paragraph>Section 301 thus preempts only those state law rights that “may be abridged by an act which, in and of itself, would infringe one of the exclusive rights” provided by federal copyright law. <i>See Harper &amp; Row, Publishers, Inc. v. Nation Enters.,</i> 723 F.2d 195, 200 (2d Cir. 1983), <i>rev’d on other grounds,</i> 471 U.S. 539, 85 L. Ed. 2d 588, 105 S. Ct. 2218 (1985). But if an “extra element” is “required instead of or in addition to the acts of reproduction, performance, distribution or display, in order to constitute a state-created cause of action, then the right does not lie ‘within the general scope of copyright,’ and there is no preemption.” 1 Nimmer § 1.01[B], at 1-14-15; <i>see also Harper &amp; Row, Publishers, Inc.,</i> 723 F.2d at 200 (where state law right “is predicated upon an act incorporating elements beyond mere reproduction or the like, the [federal and state] rights are not equivalent” and there is no preemption).</p>

<p class=Paragraph>A state law claim is not preempted if the “extra element” changes the “nature of the action so that it is <i>qualitatively</i> different from a copyright infringement claim.” <i>Mayer v. Josiah Wedgwood &amp; Sons, Ltd.,</i> 601 F. Supp. 1523, 1535 (S.D.N.Y. 1985); <i>see Harper &amp; Row, Publishers, Inc.,</i> 723 F.2d at 201. To determine whether a claim meets this standard, we must determine “what plaintiff seeks to protect, the theories in which the matter is thought to be protected and the rights sought to be enforced.” 1 Roger M. Milgrim, <i>Milgrim on Trade Secrets</i> <span class=SourcePN>&lt;982 F.2d 717&gt;</span><A name="982F.2d717"></A> § 2.06A[3], at 2-150 (1992) (hereinafter “Milgrim”). An action will not be saved from preemption by elements such as awareness or intent, which alter “the action’s scope but not its nature&nbsp;.&nbsp;.&nbsp;.” <i>Mayer,</i> 601 F. Supp. at 1535.</p>

<p class=Paragraph>Following this “extra element” test, we have held that unfair competition and misappropriation claims grounded solely in the copying of a plaintiff’s protected expression are preempted by section 301. <i>See, e.g., Walker v. Time Life Films, Inc.,</i> 784 F.2d 44, 53 (2d Cir.), <i>cert. denied,</i> 476 U.S. 1159, 90 L. Ed. 2d 721, 106 S. Ct. 2278 (1986); <i>Warner Bros. Inc. v. American Broadcasting Cos.,</i> 720 F.2d 231, 247 (2d Cir. 1983);<i>Durham Indus., Inc. v. Tomy Corp.,</i> 630 F.2d 905, 919 &amp; n. 15 (2d Cir. 1980). We also have held to be preempted a tortious interference with contract claim grounded in the impairment of a plaintiff’s right under the Copyright Act to publish derivative works. <i>See Harper &amp; Row, Publishers, Inc.,</i> 723 F.2d at 201.</p>

<p class=Paragraph>However, many state law rights that can arise in connection with instances of copyright infringement satisfy the extra element test, and thus are not preempted by section 301. These include unfair competition claims based upon breach of confidential relationship, breach of fiduciary duty and trade secrets. <i>Balboa Ins. Co. v. Trans Global Equities,</i> 218 Cal. App. 3d 1327, 1339-53, 267 Cal. Rptr. 787, 793-803 (Ct. App. 3rd Dist.), <i>cert. denied,</i> 111 S. Ct. 347, 112 L. Ed. 2d 311 (1990).</p>

<p class=Paragraph>Trade secret protection, the branch of unfair competition law at issue in this case, remains a “uniquely valuable” weapon in the defensive arsenal of computer programmers. <i>See</i> 1 Milgrim § 2.06A[5][c], at 2-172.4. Precisely because trade secret doctrine protects the discovery of ideas, processes, and systems which are explicitly precluded from coverage under copyright law, courts and commentators alike consider it a necessary and integral part of the intellectual property protection extended to computer programs. <i>See id.; Integrated Cash Management Servs., Inc. v. Digital Transactions, Inc.,</i> 920 F.2d 171, 173 (2d Cir. 1990) (while plaintiff withdrew copyright infringement claim for misappropriation of computer program, relief for theft of trade secret sustained); <i>Healthcare Affiliated Servs., Inc. v. Lippany,</i> 701 F. Supp. 1142, 1152-55 (W.D.Pa. 1988) (finding likelihood of success on trade secret claim, but not copyright claim); <i>Q-Co Indus., Inc.,</i> 625 F. Supp. at 616-18 (finding likelihood of success on trade secret claim, but no merit to copyright claim); Kretschmer, at 847-49.</p>

<p class=Paragraph>The legislative history of section 301 states that “the evolving common law rights of&nbsp;.&nbsp;.&nbsp;. trade secrets&nbsp;.&nbsp;.&nbsp;. would remain unaffected as long as the causes of action contain elements, such as&nbsp;.&nbsp;.&nbsp;. a breach of trust or confidentiality, that are different in kind from copyright infringement.” <i>House Report,</i> at 5748. Congress did not consider the term “misappropriation” to be “necessarily synonymous with copyright infringement,” or to serve as the talisman of preemption. <i>Id.</i></p>

<p class=Paragraph>Trade secret claims often are grounded upon a defendant’s breach of a duty of trust or confidence to the plaintiff through improper disclosure of confidential material. <i>See, e.g., Mercer v. C.A. Roberts Co.,</i> 570 F.2d 1232, 1238 (5th Cir. 1978); <i>Brignoli v. Balch Hardy and Scheinman, Inc.,</i> 645 F. Supp. 1201, 1205 (S.D.N.Y. 1986). The defendant’s breach of duty is the gravamen of such trade secret claims, and supplies the “extra element” that qualitatively distinguishes such trade secret causes of action from claims for copyright infringement that are based solely upon copying. <i>See, e.g., Warrington Assoc., Inc. v. Real-Time Eng’g Sys., Inc.,</i> 522 F. Supp. 367, 369 (N.D. Ill. 1981); <i>Brignoli,</i> 645 F. Supp. at 1205; <i>see also generally Balboa Ins. Co.,</i> 218 Cal. App. 3d at 1346-50, 267 Cal. Rptr. at 798-802 (reviewing cases).</p>

<h3>B. Preemption in this Case</h3>

<p class=Paragraph>The district court stated that:</p>

<p class=BlockQuote>Were CA’s [trade secret] allegations premised on a theory of illegal <i>acquisition</i> of a trade secret, a charge that might have been alleged against Arney, who is not a defendant in this case, the <span class=SourcePN>&lt;982 F.2d 718&gt;</span><A name="982F.2d718"></A> preemption analysis might be different, for there seems to be no corresponding right guaranteed to copyright owners by § 106 of the copyright act.</p>

<p class=Paragraph><i>Computer Assocs.,</i> 775 F. Supp. at 565. However, the court concluded that CA’s trade secret claims were not grounded in a theory that Altai violated a duty of confidentiality to CA. Rather, Judge Pratt stated that CA proceeded against Altai solely “on a theory that the misappropriation took place by Altai’s <i>use</i> of ADAPTER&nbsp;– the same theory as the copyright infringement count.” <i>Id.</i> The district court reasoned that “the right to be free from trade secret misappropriation through ‘use’, and the right to exclusive reproduction and distribution of a copyrighted work are not distinguishable.” <i>Id.</i> Because he concluded that there was no qualitative difference between the elements of CA’s state law trade secret claims and a claim for federal copyright infringement, Judge Pratt ruled that CA’s trade secret claims were preempted by section 301.</p>

<p class=Paragraph>We agree with CA that the district court failed to address fully the factual and theoretical bases of CA’s trade secret claims. The district court relied upon the fact that Arney&nbsp;– not Altai&nbsp;– allegedly breached a duty to CA of confidentiality by stealing secrets from CA and incorporating those secrets into OSCAR 3.4. However, under a wrongful acquisition theory based on Restatement <i>(First) of Torts</i> § 757 (1939), Williams and Altai may be liable for violating CA’s right of confidentiality. Section 757 states in relevant part:</p>

<p class=BlockQuote>One who discloses or uses another’s trade secret, without a privilege to do so, is liable to another if&nbsp;.&nbsp;.&nbsp;. (c) he learned the secret from a third person with notice of the fact that it was a secret and that the third person discovered it by improper means or that the third person’s disclosure of it was otherwise a breach of his duty to the other&nbsp;.&nbsp;.&nbsp;.</p>

<p class=Paragraph>Actual notice is not required for such a third party acquisition claim; constructive notice is sufficient. A defendant is on constructive notice when, “from the information which he has, a reasonable man would infer [a breach of confidence], or if, under the circumstances, a reasonable man would be put on inquiry and an inquiry pursued with reasonable intelligence and diligence would disclose the [breach].” <i>Id.,</i> comment 1;<i>Metallurgical Indus., Inc. v. Fourtek, Inc.,</i> 790 F.2d 1195, 1204 (5th Cir. 1986); <i>Vantage Point, Inc. v. Parker Bros., Inc.,</i> 529 F. Supp. 1204, 1210 n.2 (E.D.N.Y. 1981), <i>aff’d,</i> 697 F.2d 301 (2d Cir. 1982); <i>see also Rohm and Haas Co. v. Adco Chem. Co.,</i> 689 F.2d 424, 431 (3rd Cir. 1982) (“Defendants never asked where the ‘Harvey process’ had come from. Defendants therefore were charged ‘with whatever knowledge such inquiry would have led to.’“) (citation omitted); <i>Colgate-Palmolive Co. v. Carter Prods., Inc.,</i> 230 F.2d 855, 864 (4th Cir.) (per curiam) (defendant “‘must have known by the exercise of fair business principles’“ that its employee’s work was covered by an agreement not to disclose) (citation omitted), <i>cert. denied,</i> 352 U.S. 843, 1 L. Ed. 2d 59, 77 S. Ct. 43 (1956); 1 Milgrim § 5.04[2][c].</p>

<p class=Paragraph>We agree with the district court that New Jersey’s governing governmental interest choice of law analysis directs the application of Texas law to CA’s trade secret misappropriation claim. <i>See Computer Assocs.,</i> 775 F. Supp. at 566. Texas law recognizes trade secret misappropriation claims grounded in the reasoning of <i>Restatement</i> section 757(c), <i>see, e.g., Fourtek,</i> 790 F.2d at 1204, and the facts alleged by CA may well support such a claim.</p>

<p class=Paragraph>It is undisputed that, when Arney stole the ADAPTER code and incorporated it into his design of OSCAR 3.4, he breached his confidentiality agreement with CA. The district court noted that while such action might constitute a valid claim against <i>Arney,</i> CA is the named defendant in this lawsuit. Additionally, the district court found, as a matter of fact, that “no one at Altai, other than Arney, knew that Arney had the ADAPTER code&nbsp;.&nbsp;.&nbsp;.” <i>Computer Assocs.,</i> 775 F. Supp. at 554. However, the district court did not consider fully Altai’s potential liability for improper trade secret acquisition. It did not consider the question of Altai’s trade secret liability <span class=SourcePN>&lt;982 F.2d 719&gt;</span><A name="982F.2d719"></A> in connection with OSCAR 3.4 under a constructive notice theory, or Altai’s potential liability under an actual notice theory in connection with OSCAR 3.5.</p>

<p class=Paragraph>The district court found that, prior to CA’s bringing suit, Altai was not on actual notice of  Arney’s theft of trade secrets, and incorporation of those secrets into OSCAR 3.4. However, by virtue of Williams’ close relationship with Arney, Williams’ general familiarity with CA’s programs (having once been employed by CA himself), and the fact that Arney used the ADAPTER program in an office at Altai adjacent to Williams during a period in which he had frequent contact with Williams regarding the OSCAR/VSE project, Williams (and through him Altai) may well have been on constructive notice of Arney’s breach of his duty of confidentiality toward CA. The district court did not address whether Altai was on constructive notice, thereby placing it under a duty of inquiry; rather the court’s finding that only Arney affirmatively knew of the theft of CA’s trade secrets and incorporation of those secrets into OSCAR 3.4 simply disposed of the issue of actual notice in connection with the creation of OSCAR 3.4. CA’s claim of liability based on constructive notice, never considered in the district court’s opinion, must be determined on remand.</p>

<p class=Paragraph>With respect to actual notice, it is undisputed that CA’s first complaint, filed in August 1988, informed Altai of Arney’s trade secret violations in connection with the creation of OSCAR 3.4. The first complaint alleged that Arney assisted in the development of ADAPTER, thereby obtaining knowledge of CA’s related trade secrets. It also alleged that Altai misappropriated CA’s trade secrets by incorporating them into ZEKE.</p>

<p class=Paragraph>In response to CA’s complaint, Altai rewrote OSCAR 3.4, creating OSCAR 3.5. While we agree with the district court that OSCAR 3.5 did not contain any expression protected by copyright, it may nevertheless still have embodied many of CA’s trade secrets that Arney brought with him to Altai. Since Altai’s rewrite was conducted with full knowledge of Arney’s prior misappropriation, in breach of his duty of confidentiality, it follows that OSCAR 3.5 was created with actual knowledge of trade secret violations. Thus, with regard to OSCAR 3.5, CA has a viable trade secret claim against Altai that must be considered by the district court on remand. This claim is grounded in Altai’s alleged use of CA’s trade secrets in the creation of OSCAR 3.5, while on actual notice of Arney’s theft of trade secrets and incorporation of those secrets into OSCAR 3.4. The district court correctly stated that a state law claim based <i>solely</i> upon Altai’s “use”, by copying, of ADAPTER’s non-literal elements could not satisfy the governing “extra element” test, and would be preempted by section 301. However, where the use of copyrighted expression is simultaneously the violation of a duty of confidentiality established by state law, that extra element renders the state right qualitatively distinct from the federal right, thereby foreclosing preemption under section 301.</p>

<p class=Paragraph>We are also convinced that CA adequately pled a wrongful acquisition claim before Judge Mishler and Judge Pratt. In ruling that CA failed to properly plead a non-preempted claim, Judge Pratt relied heavily upon two allegations in CA’s amended complaint. <i>Id.</i> at 563-64. They read as follows:</p>

<p class=BlockQuote>P 57. By reason of the facts stated in paragraph 39 and by copying from CA-SCHEDULER into ZEKE, ZACK and ZEBB the various elements stated in paragraphs 39-51, 54 and 55, defendant Altai has infringed [CA’s] copyright in CA-SCHEDULER.</p>

<p class=BlockQuote>*&nbsp;*&nbsp;*</p>

<p class=BlockQuote>P 73. Defendant’s incorporation into its ZEKE, ZACK and ZEBB programs of the various elements contained in the ADAPTER component of [CA’s] CA-SCHEDULER program as set out in paragraphs 39-51, 54 and 55 constitutes the willful misappropriation of the proprietary property and trade secrets of plaintiff [CA].</p>

<p class=Paragraph><span class=SourcePN>&lt;982 F.2d 720&gt;</span><A name="982F.2d720"></A> From these pleadings, Judge Pratt concluded that the very same act, i.e., Altai’s copying of various elements of CA’s program, was the basis for both CA’s copyright infringement and trade secret claims. <i>See id.</i> at 564. We agree with Judge Pratt that CA’s allegations are somewhat inartfully stated. However, when taken together, the terms “incorporation” and “misappropriation” in paragraph 73 above suggest to us an act of a qualitatively different nature than the infringement pled in paragraph 57. <i>House Report,</i> at 5748 (“‘misappropriation’ is not necessarily synonymous with copyright infringement”).</p>

<p class=Paragraph>In support of our reading, we note that paragraphs 65-75 of CA’s amended complaint alleged facts that reasonably comprise the elements of a wrongful acquisition of trade secrets claim. CA averred that, while he was employed at CA, Arney learned CA’s trade secrets regarding the ADAPTER program. CA further alleged that after Arney went to work for Altai, Altai misappropriated those trade secrets by incorporating CA’s ADAPTER program into its own product. Finally, CA claimed that the trade secret misappropriation was carried out “in a willful, wanton and reckless manner in disregard of [CA’s] rights.” In other words, Altai could have reasonably inferred from CA’s allegations that CA’s claim, in part, rested on Williams’ “wanton and reckless” behavior in the face of constructive notice.</p>

<p class=Paragraph>In addition, while responding to Altai’s preemption argument in its motion to dismiss and for summary judgment, CA specifically argued in its brief to Judge Mishler that “it can easily be inferred that Mr. Arney was hired by Altai to misappropriate [CA’s] confidential source code for Altai’s benefit.” At oral argument, CA further contended that:</p>

<p class=BlockQuote>The circumstances of Mr. Arney’s hiring suggested that Mr. Williams wanted more than Mr. Arney’s ability and in fact got exactly what he wanted. And that is Computer Associates’ confidential Adapter technology.</p>

<p class=BlockQuote>*&nbsp;*&nbsp;*</p>

<p class=BlockQuote>[Arney testified that he] surreptitiously took that code home from Computer Associates after giving notice he was going to go to work for Altai, and after being hired by Mr. Williams to come to Altai and reconstruct Zeke, to work on the MVS operating system.</p>

<p class=Paragraph>In the aftermath of Judge Mishler’s ruling in its favor on Altai’s motion to dismiss and for summary judgment, CA reasonably believed that it had sufficiently alleged a non-preempted claim. And, in light of CA’s arguments and Judge Mishler’s ruling, Altai clearly was on notice that the amended complaint placed non-preempted trade secret claims in play. <i>See</i> 5 Charles A. Wright &amp; Arthur R. Miller, <i>Federal Practice and Procedure</i> § 1215, at 136-38 (2d ed. 1990) (federal pleading standards require plaintiff to provide defendant with fair notice of claim and grounds it rests on).</p>

<p class=Paragraph>Accordingly, we vacate the judgment of the district court and remand for reconsideration of those aspects of CA’s trade secret claims related to Altai’s alleged constructive notice of Arney’s theft of CA’s trade secrets and incorporation of those secrets into OSCAR 3.4. We note, however, that CA may be unable to recover damages for its trade secrets which are embodied in OSCAR 3.4 since Altai has conceded copyright liability and damages for its incorporation of ADAPTER into OSCAR 3.4. CA may not obtain a double recovery where the damages for copyright infringement and trade secret misappropriation are coextensive.</p>

<p class=Paragraph>However, additional trade secret damages may well flow from CA’s creation of OSCAR 3.5. Judge Pratt correctly acknowledged that “if CA’s claim of misappropriation of trade secrets did not fail on preemption grounds, it would be necessary to examine in some detail the conflicting claims and evidence relating to the process by which Altai rewrote OSCAR and ultimately produced version 3.5.” <i>Computer Assocs.,</i> 775 F. Supp. at 554-55; <i>see also</i> 1 Milgrim § 5.04[2][d], at 5-148 (“after notice, the [innocent] second user should cease the use, and if he does not he can be enjoined and held liable for damages arising from such use subsequent to notice”). Since we hold that CA’s trade secret claims <span class=SourcePN>&lt;982 F.2d 721&gt;</span><A name="982F.2d721"></A> are not preempted, and that, in writing OSCAR 3.5, Altai had actual notice of Arney’s earlier trade secret violations, we vacate and remand for such further inquiry anticipated by the district court. If the district court finds that CA was injured by Altai’s unlawful use of CA’s trade secrets in creating OSCAR 3.5, CA is entitled to an award of damages for trade secret misappropriation, as well as consideration by the district court of CA’s request for injunctive relief on its trade secret claim.</p>

<h1>Conclusion</h1>

<p class=Paragraph>In adopting the above three step analysis for substantial similarity between the non-literal elements of computer programs, we seek to insure two things: (1) that programmers may receive appropriate copyright protection for innovative utilitarian works containing expression; and (2) that non-protectable technical expression remains in the public domain for others to use freely as building blocks in their own work. At first blush, it may seem counter-intuitive that someone who has benefited to some degree from illicitly obtained material can emerge from an infringement suit relatively unscathed. However, so long as the appropriated material consists of non-protectable expression, “this result is neither unfair nor unfortunate. It is the means by which copyright advances the progress of science and art.” <i>Feist,</i> 111 S. Ct. at 1290.</p>

<p class=Paragraph>Furthermore, we underscore that so long as trade secret law is employed in a manner that does not encroach upon the exclusive domain of the Copyright Act, it is an appropriate means by which to secure compensation for software espionage.</p>

<p class=Paragraph>Accordingly, we affirm the judgment of the district court in part; vacate in part; and remand for further proceedings. The parties shall bear their own costs of appeal, including the petition for rehearing.</p>

<p class=Judge>Altimari, Circuit Judge, Concurring in part and Dissenting in part:</p>

<p class=Paragraph>Because I believe that our original opinion, <i>see Computer Assoc. Int’l v. Altai,</i> 1992 U.S. App. LEXIS 14305, 1992 WL 139364 (2d Cir. 1992), is a reasoned analysis of the issues presented, I adhere to the original determination and therefore concur in Part 1 and respectfully dissent from Part 2 of the amended opinion.</p>

</div>

</body>

</html>







